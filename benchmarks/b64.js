/* Generated by the Nim Compiler v1.1.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI49450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI114907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI147632 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI150247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI49430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49462 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI46042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI49508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI49426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49428 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI49446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49446.node = NNI49446;
var NNI49442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49442.node = NNI49442;
var NNI49428 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49428.node = NNI49428;
NTI49508.base = NTI49426;
NTI49514.base = NTI49426;
var NNI49426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI49508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI46042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI46040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI46040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI46016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI49514, name: "up", sons: null}]};
NTI49426.node = NNI49426;
var NNI49408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49408.node = NNI49408;
NTI49426.base = NTI49408;
NTI49428.base = NTI49426;
NTI49442.base = NTI49428;
NTI49446.base = NTI49442;
var NNI49458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49458.node = NNI49458;
NTI49458.base = NTI49428;
var NNI49444 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49444.node = NNI49444;
NTI49444.base = NTI49442;
var NNI49462 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49462.node = NNI49462;
NTI49462.base = NTI49428;
var NNI49452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49452.node = NNI49452;
var NNI49430 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49430.node = NNI49430;
NTI49430.base = NTI49426;
NTI49452.base = NTI49430;
var NNI150247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI147632, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI46006, name: "b", sons: null}]};
NTI150247.node = NNI150247;
var NNI114907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI46006, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI46006, name: "b", sons: null}]};
NTI114907.node = NNI114907;
var NNI49450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49450.node = NNI49450;
NTI49450.base = NTI49428;

function mnewString(len_72463) {
        return new Array(len_72463);
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_73827, src_73828, ti_73829) {
  var result_74019 = null;

    switch (ti_73829.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_73801(ti_73829))) {
      result_74019 = src_73828;
      }
      else {
        result_74019 = [src_73828[0], src_73828[1]];
      }
      
      break;
    case 19:
            if (dest_73827 === null || dest_73827 === undefined) {
        dest_73827 = {};
      }
      else {
        for (var key in dest_73827) { delete dest_73827[key]; }
      }
      for (var key in src_73828) { dest_73827[key] = src_73828[key]; }
      result_74019 = dest_73827;
    
      break;
    case 18:
    case 17:
      if (!((ti_73829.base == null))) {
      result_74019 = nimCopy(dest_73827, src_73828, ti_73829.base);
      }
      else {
      if ((ti_73829.kind == 17)) {
      result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {m_type: ti_73829} : dest_73827;
      }
      else {
        result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {} : dest_73827;
      }
      }
      nimCopyAux(result_74019, src_73828, ti_73829.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_73828 === null) {
        result_74019 = null;
      }
      else {
        if (dest_73827 === null || dest_73827 === undefined) {
          dest_73827 = new Array(src_73828.length);
        }
        else {
          dest_73827.length = src_73828.length;
        }
        result_74019 = dest_73827;
        for (var i = 0; i < src_73828.length; ++i) {
          result_74019[i] = nimCopy(result_74019[i], src_73828[i], ti_73829.base);
        }
      }
    
      break;
    case 28:
            if (src_73828 !== null) {
        result_74019 = src_73828.slice(0);
      }
    
      break;
    default: 
      result_74019 = src_73828;
      break;
    }

  return result_74019;

}

function makeNimstrLit(c_72270) {
      var ln = c_72270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_72270.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_72304) {
                    var Tmp5;
            var Tmp7;

  var result_72305 = null;

    var res_72378 = new_seq_72336((s_72304 != null ? s_72304.length : 0));
    var i_72380 = 0;
    var j_72382 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_72380 < (s_72304 != null ? s_72304.length : 0))) break L2;
          var c_72383 = s_72304[i_72380];
          if ((c_72383 < 128)) {
          res_72378[j_72382] = String.fromCharCode(c_72383);
          i_72380 += 1;
          }
          else {
            var helper_72406 = new_seq_72336(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_72407 = c_72383.toString(16);
                  if (((code_72407 != null ? code_72407.length : 0) == 1)) {
                  if (helper_72406 != null) { helper_72406.push("%0"); } else { helper_72406 = ["%0"]; };
                  }
                  else {
                  if (helper_72406 != null) { helper_72406.push("%"); } else { helper_72406 = ["%"]; };
                  }
                  
                  if (helper_72406 != null) { helper_72406.push(code_72407); } else { helper_72406 = [code_72407]; };
                  i_72380 += 1;
                    if (((s_72304 != null ? s_72304.length : 0) <= i_72380)) Tmp5 = true; else {                      Tmp5 = (s_72304[i_72380] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_72383 = s_72304[i_72380];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_72378[j_72382] = decodeURIComponent(helper_72406.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_72378[j_72382] = helper_72406.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_72382 += 1;
        }
    } while(false);
    if (res_72378 === null) res_72378 = [];
               if (res_72378.length < j_72382) { for (var i=res_72378.length;i<j_72382;++i) res_72378.push(null); }
               else { res_72378.length = j_72382; };
    result_72305 = res_72378.join("");

  return result_72305;

}

function raiseException(e_70618, ename_70619) {
    e_70618.name = ename_70619;
    if ((excHandler == 0)) {
    unhandledException(e_70618);
    }
    
    throw e_70618;

  
}

function subInt(a_72821, b_72822) {
        var result = a_72821 - b_72822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}

function cstrToNimstr(c_72287) {
      var ln = c_72287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_72287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_72287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function chckIndx(i_74105, a_74106, b_74107) {
      var Tmp1;

  var result_74108 = 0;

  BeforeRet: do {
      if (!(a_74106 <= i_74105)) Tmp1 = false; else {        Tmp1 = (i_74105 <= b_74107);      }    if (Tmp1) {
    result_74108 = i_74105;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_74105, a_74106, b_74107);
    }
    
  } while (false);

  return result_74108;

}

function addInt(a_72803, b_72804) {
        var result = a_72803 + b_72804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}

function divInt(a_72857, b_72858) {
        if (b_72858 == 0) raiseDivByZero();
    if (b_72858 == -1 && a_72857 == 2147483647) raiseOverflow();
    return Math.trunc(a_72857 / b_72858);
  

  
}

function mulInt(a_72839, b_72840) {
        var result = a_72839 * b_72840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

  
}

function chckRange(i_74124, a_74125, b_74126) {
      var Tmp1;

  var result_74127 = 0;

  BeforeRet: do {
      if (!(a_74125 <= i_74124)) Tmp1 = false; else {        Tmp1 = (i_74124 <= b_74126);      }    if (Tmp1) {
    result_74127 = i_74124;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_74127;

}

function modInt(a_72875, b_72876) {
        if (b_72876 == 0) raiseDivByZero();
    if (b_72876 == -1 && a_72875 == 2147483647) raiseOverflow();
    return Math.trunc(a_72875 % b_72876);
  

  
}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function nimCharToStr(x_70062) {
  var result_70063 = null;

    result_70063 = nimCopy(null, mnewString(1), NTI46040);
    result_70063[0] = x_70062;

  return result_70063;

}

function addChar(x_74311, c_74312) {
    x_74311.push(c_74312);

  
}
var ConstSet9 = setConstr(46, 44);
var ConstSet10 = setConstr(10, 13, 32, 61);
var ConstSet11 = setConstr(10, 13, 32);
          var decode_table_91611 = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 62, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 63, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255];

function absInt(a_73017) {
    var Tmp1;

  var result_73018 = 0;

    if ((a_73017 < 0)) {
    Tmp1 = (a_73017 * -1);
    }
    else {
    Tmp1 = a_73017;
    }
    
    result_73018 = Tmp1;

  return result_73018;

}
var nim_program_result = 0;
var global_raise_hook_64018 = [null];
var local_raise_hook_64023 = [null];
var out_of_mem_hook_64026 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var utc_instance_214431 = [null];
var local_instance_214432 = [null];

function is_fat_pointer_73801(ti_73803) {
  var result_73804 = false;

  BeforeRet: do {
    result_73804 = !((ConstSet1[ti_73803.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_73804;

}

function nimCopyAux(dest_73832, src_73833, n_73835) {
    switch (n_73835.kind) {
    case 0:
      break;
    case 1:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_73835.sons.length; i++) {
      nimCopyAux(dest_73832, src_73833, n_73835.sons[i]);
    }
    
      break;
    case 3:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
      for (var i = 0; i < n_73835.sons.length; ++i) {
        nimCopyAux(dest_73832, src_73833, n_73835.sons[i][1]);
      }
    
      break;
    }

  
}

function add_64038(x_64041, x_64041_Idx, y_64042) {
          if (x_64041[x_64041_Idx] === null) { x_64041[x_64041_Idx] = []; }
      var off = x_64041[x_64041_Idx].length;
      x_64041[x_64041_Idx].length += y_64042.length;
      for (var i = 0; i < y_64042.length; ++i) {
        x_64041[x_64041_Idx][off+i] = y_64042.charCodeAt(i);
      }
    

  
}

function new_seq_72336(len_72339) {
  var result_72341 = null;

    result_72341 = new Array(len_72339); for (var i=0;i<len_72339;++i) {result_72341[i]=null;}
  return result_72341;

}

function unhandledException(e_70542) {
    var buf_70543 = [[]];
    if (!(((e_70542.message != null ? e_70542.message.length : 0) == 0))) {
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_70543[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(e_70542.message); } else { buf_70543[0] = e_70542.message.slice(); };
    }
    else {
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_70543[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit(" [")); } else { buf_70543[0] = makeNimstrLit(" ["); };
    add_64038(buf_70543, 0, e_70542.name);
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("]\x0A")); } else { buf_70543[0] = makeNimstrLit("]\x0A"); };
    var cbuf_70601 = toJSStr(buf_70543[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_70601);
  }
  else {
    throw cbuf_70601;
  }
  

  
}

function raiseOverflow() {
    var eHEX60gensym71058_71203 = null;
    eHEX60gensym71058_71203 = {m_type: NTI49446, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym71058_71203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI46040);
    eHEX60gensym71058_71203.parent = null;
    raiseException(eHEX60gensym71058_71203, "OverflowError");

  
}

function raiseIndexError(i_71655, a_71656, b_71657) {
    var Tmp1;

    var eHEX60gensym71802_72003 = null;
    eHEX60gensym71802_72003 = {m_type: NTI49458, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    if ((b_71657 < a_71656)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_71655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_71656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_71657)+"") || []);
    }
    
    eHEX60gensym71802_72003.message = nimCopy(null, Tmp1, NTI46040);
    eHEX60gensym71802_72003.parent = null;
    raiseException(eHEX60gensym71802_72003, "IndexError");

  
}

function nsuRepeatChar(c_197456, count_197457) {
  var result_197458 = null;

    result_197458 = nimCopy(null, mnewString(count_197457), NTI46040);
    L1: do {
      var i_197467 = 0;
      var colontmp__225588 = 0;
      colontmp__225588 = subInt(count_197457, 1);
      var res_225589 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_225589 <= colontmp__225588)) break L3;
            i_197467 = res_225589;
            result_197458[chckIndx(i_197467, 0, (result_197458 != null ? result_197458.length : 0)+0-1)-0] = c_197456;
            res_225589 = addInt(res_225589, 1);
          }
      } while(false);
    } while(false);

  return result_197458;

}

function raiseDivByZero() {
    var eHEX60gensym71257_71403 = null;
    eHEX60gensym71257_71403 = {m_type: NTI49444, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym71257_71403.message = nimCopy(null, makeNimstrLit("division by zero"), NTI46040);
    eHEX60gensym71257_71403.parent = null;
    raiseException(eHEX60gensym71257_71403, "DivByZeroError");

  
}

function raiseRangeError() {
    var eHEX60gensym71457_71603 = null;
    eHEX60gensym71457_71603 = {m_type: NTI49462, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym71457_71603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI46040);
    eHEX60gensym71457_71603.parent = null;
    raiseException(eHEX60gensym71457_71603, "RangeError");

  
}

function encode_91086(s_91088) {

    function encode_size_91100(sizeHEX60gensym91090_91102) {
      var result_91103 = 0;

      BeforeRet: do {
        result_91103 = addInt(divInt(mulInt(sizeHEX60gensym91090_91102, 4), 3), 6);
        break BeforeRet;
      } while (false);

      return result_91103;

    }

  var result_91089 = null;

    (result_91089 == null ? result_91089 = mnewString(chckRange(encode_size_91100((s_91088 != null ? s_91088.length : 0)), 0, 2147483647)) : result_91089.length = chckRange(encode_size_91100((s_91088 != null ? s_91088.length : 0)), 0, 2147483647));
    var input_indexHEX60gensym91091_91118 = 0;
    var output_indexHEX60gensym91092_91120 = 0;
    var input_endsHEX60gensym91093_91121 = subInt((s_91088 != null ? s_91088.length : 0), modInt((s_91088 != null ? s_91088.length : 0), 3));
    var nHEX60gensym91094_91122 = 0;
    var bHEX60gensym91095_91123 = 0;
    L1: do {
        L2: while (true) {
        if (!!((input_indexHEX60gensym91091_91118 == input_endsHEX60gensym91093_91121))) break L2;
          bHEX60gensym91095_91123 = s_91088[chckIndx(input_indexHEX60gensym91091_91118, 0, (s_91088 != null ? s_91088.length : 0)+0-1)-0];
          nHEX60gensym91094_91122 = (bHEX60gensym91095_91123 << 16);
          input_indexHEX60gensym91091_91118 = addInt(input_indexHEX60gensym91091_91118, 1);
          bHEX60gensym91095_91123 = s_91088[chckIndx(input_indexHEX60gensym91091_91118, 0, (s_91088 != null ? s_91088.length : 0)+0-1)-0];
          nHEX60gensym91094_91122 = (nHEX60gensym91094_91122 | (bHEX60gensym91095_91123 << 8));
          input_indexHEX60gensym91091_91118 = addInt(input_indexHEX60gensym91091_91118, 1);
          bHEX60gensym91095_91123 = s_91088[chckIndx(input_indexHEX60gensym91091_91118, 0, (s_91088 != null ? s_91088.length : 0)+0-1)-0];
          nHEX60gensym91094_91122 = (nHEX60gensym91094_91122 | (bHEX60gensym91095_91123 << 0));
          input_indexHEX60gensym91091_91118 = addInt(input_indexHEX60gensym91091_91118, 1);
          result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 18) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
          output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
          result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 12) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
          output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
          result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 6) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
          output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
          result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 0) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
          output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
        }
    } while(false);
    var paddingHEX60gensym91099_91299 = modInt((s_91088 != null ? s_91088.length : 0), 3);
    if ((paddingHEX60gensym91099_91299 == 1)) {
    bHEX60gensym91095_91123 = s_91088[chckIndx(input_indexHEX60gensym91091_91118, 0, (s_91088 != null ? s_91088.length : 0)+0-1)-0];
    nHEX60gensym91094_91122 = (bHEX60gensym91095_91123 << 16);
    input_indexHEX60gensym91091_91118 = addInt(input_indexHEX60gensym91091_91118, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 18) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 12) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = 61;
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = 61;
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    }
    else {
    if ((paddingHEX60gensym91099_91299 == 2)) {
    bHEX60gensym91095_91123 = s_91088[chckIndx(input_indexHEX60gensym91091_91118, 0, (s_91088 != null ? s_91088.length : 0)+0-1)-0];
    nHEX60gensym91094_91122 = (bHEX60gensym91095_91123 << 16);
    input_indexHEX60gensym91091_91118 = addInt(input_indexHEX60gensym91091_91118, 1);
    bHEX60gensym91095_91123 = s_91088[chckIndx(input_indexHEX60gensym91091_91118, 0, (s_91088 != null ? s_91088.length : 0)+0-1)-0];
    nHEX60gensym91094_91122 = (nHEX60gensym91094_91122 | (bHEX60gensym91095_91123 << 8));
    input_indexHEX60gensym91091_91118 = addInt(input_indexHEX60gensym91091_91118, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 18) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 12) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((nHEX60gensym91094_91122 >>> 0) >>> 6) & 63), 0, (makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/") != null ? makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length : 0)+0-1)-0];
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    result_91089[chckIndx(output_indexHEX60gensym91092_91120, 0, (result_91089 != null ? result_91089.length : 0)+0-1)-0] = 61;
    output_indexHEX60gensym91092_91120 = addInt(output_indexHEX60gensym91092_91120, 1);
    }
    }
    (result_91089 == null ? result_91089 = mnewString(chckRange(output_indexHEX60gensym91092_91120, 0, 2147483647)) : result_91089.length = chckRange(output_indexHEX60gensym91092_91120, 0, 2147483647));

  return result_91089;

}

function parse_saturated_natural_96231(s_96233, b_96235, b_96235_Idx, start_96236) {
      var Tmp1;
          var Tmp4;

  var result_96238 = 0;

    var i_96239 = start_96236;
    if (((i_96239 < (s_96233 != null ? s_96233.length : 0)) && (s_96233[chckIndx(i_96239, 0, (s_96233 != null ? s_96233.length : 0)+0-1)-0] == 43))) {
    i_96239 = addInt(i_96239, 1);
    }
    
      if (!(i_96239 < (s_96233 != null ? s_96233.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet6[s_96233[chckIndx(i_96239, 0, (s_96233 != null ? s_96233.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    b_96235[b_96235_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_96239 < (s_96233 != null ? s_96233.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet7[s_96233[chckIndx(i_96239, 0, (s_96233 != null ? s_96233.length : 0)+0-1)-0]] != undefined);          }        if (!Tmp4) break L3;
          var c_96268 = subInt(s_96233[chckIndx(i_96239, 0, (s_96233 != null ? s_96233.length : 0)+0-1)-0], 48);
          if ((b_96235[b_96235_Idx] <= divInt(subInt(2147483647, c_96268), 10))) {
          b_96235[b_96235_Idx] = addInt(mulInt(b_96235[b_96235_Idx], 10), c_96268);
          }
          else {
            b_96235[b_96235_Idx] = 2147483647;
          }
          
          i_96239 = addInt(i_96239, 1);
          L5: do {
              L6: while (true) {
              if (!((i_96239 < (s_96233 != null ? s_96233.length : 0)) && (s_96233[chckIndx(i_96239, 0, (s_96233 != null ? s_96233.length : 0)+0-1)-0] == 95))) break L6;
                i_96239 = addInt(i_96239, 1);
              }
          } while(false);
        }
    } while(false);
    result_96238 = subInt(i_96239, start_96236);
    }
    

  return result_96238;

}

function HEX5BHEX5D_150319(s_150323, x_150325) {
  var result_150326 = null;

    var a_150401 = x_150325.a;
    var l_150601 = addInt(subInt(subInt((s_150323 != null ? s_150323.length : 0), x_150325.b), a_150401), 1);
    result_150326 = nimCopy(null, mnewString(chckRange(l_150601, 0, 2147483647)), NTI46040);
    L1: do {
      var i_150609 = 0;
      var i_225622 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_225622 < l_150601)) break L3;
            i_150609 = i_225622;
            result_150326[chckIndx(i_150609, 0, (result_150326 != null ? result_150326.length : 0)+0-1)-0] = s_150323[chckIndx(addInt(i_150609, a_150401), 0, (s_150323 != null ? s_150323.length : 0)+0-1)-0];
            i_225622 = addInt(i_225622, 1);
          }
      } while(false);
    } while(false);

  return result_150326;

}

function HEX2EHEX2E_150239(a_150243, b_150244) {
  var result_150250 = {a: 0, b: 0};

    nimCopy(result_150250, {a: a_150243, b: b_150244}, NTI150247);

  return result_150250;

}

function parse_standard_format_specifier_222322(s_222324, start_222325, ignore_unknown_suffix_222327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_222328 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

    result_222328.fill = 32;
    result_222328.align = 0;
    result_222328.sign = 45;
    var i_222331 = start_222325;
    if (((addInt(i_222331, 1) < (s_222324 != null ? s_222324.length : 0)) && (ConstSet2[s_222324[chckIndx(addInt(i_222331, 1), 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0]] != undefined))) {
    result_222328.fill = s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0];
    result_222328.align = s_222324[chckIndx(addInt(i_222331, 1), 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0];
    i_222331 = addInt(i_222331, 2);
    }
    else {
    if (((i_222331 < (s_222324 != null ? s_222324.length : 0)) && (ConstSet3[s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0]] != undefined))) {
    result_222328.align = s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0];
    i_222331 = addInt(i_222331, 1);
    }
    }
    if (((i_222331 < (s_222324 != null ? s_222324.length : 0)) && (ConstSet4[s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0]] != undefined))) {
    result_222328.sign = s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0];
    i_222331 = addInt(i_222331, 1);
    }
    
    if (((i_222331 < (s_222324 != null ? s_222324.length : 0)) && (s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0] == 35))) {
    result_222328.alternateForm = true;
    i_222331 = addInt(i_222331, 1);
    }
    
      if (!((addInt(i_222331, 1) < (s_222324 != null ? s_222324.length : 0)) && (s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet5[s_222324[chckIndx(addInt(i_222331, 1), 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp1) {
    result_222328.padWithZero = true;
    i_222331 = addInt(i_222331, 1);
    }
    
    var parsed_length_222389 = parse_saturated_natural_96231(s_222324, result_222328, "minimumWidth", i_222331);
    i_222331 = addInt(i_222331, parsed_length_222389);
    if (((i_222331 < (s_222324 != null ? s_222324.length : 0)) && (s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0] == 46))) {
    i_222331 = addInt(i_222331, 1);
    var parsed_length_b_222403 = parse_saturated_natural_96231(s_222324, result_222328, "precision", i_222331);
    i_222331 = addInt(i_222331, parsed_length_b_222403);
    }
    else {
      result_222328.precision = -1;
    }
    
      if (!(i_222331 < (s_222324 != null ? s_222324.length : 0))) Tmp2 = false; else {        Tmp2 = (ConstSet8[s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0]] != undefined);      }    if (Tmp2) {
    result_222328.typ = s_222324[chckIndx(i_222331, 0, (s_222324 != null ? s_222324.length : 0)+0-1)-0];
    i_222331 = addInt(i_222331, 1);
    }
    
    result_222328.endPosition = i_222331;
      if (!!((i_222331 == (s_222324 != null ? s_222324.length : 0)))) Tmp3 = false; else {        Tmp3 = !(ignore_unknown_suffix_222327);      }    if (Tmp3) {
    var eHEX60gensym222457_222603 = null;
    eHEX60gensym222457_222603 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym222457_222603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_150319(s_222324, HEX2EHEX2E_150239(i_222331, 1)) || []), NTI46040);
    eHEX60gensym222457_222603.parent = null;
    raiseException(eHEX60gensym222457_222603, "ValueError");
    }
    

  return result_222328;

}

function nucruneLen(s_116829) {
  var result_116830 = 0;

    var i_116832 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_116832 < (s_116829 != null ? s_116829.length : 0))) break L2;
          if ((s_116829[chckIndx(i_116832, 0, (s_116829 != null ? s_116829.length : 0)+0-1)-0] <= 127)) {
          i_116832 = addInt(i_116832, 1);
          }
          else {
          if ((((s_116829[chckIndx(i_116832, 0, (s_116829 != null ? s_116829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          i_116832 = addInt(i_116832, 2);
          }
          else {
          if ((((s_116829[chckIndx(i_116832, 0, (s_116829 != null ? s_116829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
          i_116832 = addInt(i_116832, 3);
          }
          else {
          if ((((s_116829[chckIndx(i_116832, 0, (s_116829 != null ? s_116829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
          i_116832 = addInt(i_116832, 4);
          }
          else {
          if ((((s_116829[chckIndx(i_116832, 0, (s_116829 != null ? s_116829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
          i_116832 = addInt(i_116832, 5);
          }
          else {
          if ((((s_116829[chckIndx(i_116832, 0, (s_116829 != null ? s_116829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
          i_116832 = addInt(i_116832, 6);
          }
          else {
          i_116832 = addInt(i_116832, 1);
          }
          }}}}}
          result_116830 = addInt(result_116830, 1);
        }
    } while(false);

  return result_116830;

}

function rune_len_at_116931(s_116933, i_116934) {
  var result_116935 = 0;

    if ((s_116933[chckIndx(i_116934, 0, (s_116933 != null ? s_116933.length : 0)+0-1)-0] <= 127)) {
    result_116935 = 1;
    }
    else {
    if ((((s_116933[chckIndx(i_116934, 0, (s_116933 != null ? s_116933.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
    result_116935 = 2;
    }
    else {
    if ((((s_116933[chckIndx(i_116934, 0, (s_116933 != null ? s_116933.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
    result_116935 = 3;
    }
    else {
    if ((((s_116933[chckIndx(i_116934, 0, (s_116933 != null ? s_116933.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
    result_116935 = 4;
    }
    else {
    if ((((s_116933[chckIndx(i_116934, 0, (s_116933 != null ? s_116933.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
    result_116935 = 5;
    }
    else {
    if ((((s_116933[chckIndx(i_116934, 0, (s_116933 != null ? s_116933.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
    result_116935 = 6;
    }
    else {
      result_116935 = 1;
    }
    }}}}}

  return result_116935;

}

function rune_offset_122244(s_122246, pos_122247, start_122248) {
  var result_122249 = 0;

  BeforeRet: do {
    var i_122251 = 0;
    var o_122252 = start_122248;
    L1: do {
        L2: while (true) {
        if (!(i_122251 < pos_122247)) break L2;
          o_122252 = addInt(o_122252, chckRange(rune_len_at_116931(s_122246, o_122252), 0, 2147483647));
          if (((s_122246 != null ? s_122246.length : 0) <= o_122252)) {
          result_122249 = -1;
          break BeforeRet;
          }
          
          i_122251 = addInt(i_122251, 1);
        }
    } while(false);
    result_122249 = o_122252;
    break BeforeRet;
  } while (false);

  return result_122249;

}

function validate_utf8_119429(s_119431) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_119432 = 0;

  BeforeRet: do {
    var i_119434 = 0;
    var l_119435 = (s_119431 != null ? s_119431.length : 0);
    L1: do {
        L2: while (true) {
        if (!(i_119434 < l_119435)) break L2;
          if ((s_119431[chckIndx(i_119434, 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] <= 127)) {
          i_119434 = addInt(i_119434, 1);
          }
          else {
          if ((((s_119431[chckIndx(i_119434, 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
          if ((s_119431[chckIndx(i_119434, 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] < 194)) {
          result_119432 = i_119434;
          break BeforeRet;
          }
          
            if (!(addInt(i_119434, 1) < l_119435)) Tmp3 = false; else {              Tmp3 = (((s_119431[chckIndx(addInt(i_119434, 1), 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_119434 = addInt(i_119434, 2);
          }
          else {
            result_119432 = i_119434;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_119431[chckIndx(i_119434, 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_119434, 2) < l_119435)) Tmp5 = false; else {              Tmp5 = (((s_119431[chckIndx(addInt(i_119434, 1), 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_119431[chckIndx(addInt(i_119434, 2), 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_119434 = addInt(i_119434, 3);
          }
          else {
            result_119432 = i_119434;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_119431[chckIndx(i_119434, 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_119434, 3) < l_119435)) Tmp8 = false; else {              Tmp8 = (((s_119431[chckIndx(addInt(i_119434, 1), 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_119431[chckIndx(addInt(i_119434, 2), 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_119431[chckIndx(addInt(i_119434, 3), 0, (s_119431 != null ? s_119431.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_119434 = addInt(i_119434, 4);
          }
          else {
            result_119432 = i_119434;
            break BeforeRet;
          }
          
          }
          else {
            result_119432 = i_119434;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_119432 = -1;
    break BeforeRet;
  } while (false);

  return result_119432;

}

function align_string_222222(s_222224, minimum_width_222225, align_222226, fill_222227) {
      var Tmp1;

  var result_222228 = null;

    if ((minimum_width_222225 == 0)) {
    result_222228 = nimCopy(null, s_222224, NTI46040);
    }
    else {
      if ((validate_utf8_119429(s_222224) == -1)) {
      Tmp1 = nucruneLen(s_222224);
      }
      else {
      Tmp1 = (s_222224 != null ? s_222224.length : 0);
      }
      
      var s_rune_len_222229 = Tmp1;
      var to_fill_222230 = subInt(minimum_width_222225, s_rune_len_222229);
      if ((to_fill_222230 <= 0)) {
      result_222228 = nimCopy(null, s_222224, NTI46040);
      }
      else {
      if (((align_222226 == 60) || (align_222226 == 0))) {
      result_222228 = nimCopy(null, (s_222224 || []).concat(nsuRepeatChar(fill_222227, chckRange(to_fill_222230, 0, 2147483647)) || []), NTI46040);
      }
      else {
      if ((align_222226 == 94)) {
      var half_222231 = divInt(to_fill_222230, 2);
      result_222228 = nimCopy(null, (nsuRepeatChar(fill_222227, chckRange(half_222231, 0, 2147483647)) || []).concat(s_222224 || [],nsuRepeatChar(fill_222227, chckRange(subInt(to_fill_222230, half_222231), 0, 2147483647)) || []), NTI46040);
      }
      else {
        result_222228 = nimCopy(null, (nsuRepeatChar(fill_222227, chckRange(to_fill_222230, 0, 2147483647)) || []).concat(s_222224 || []), NTI46040);
      }
      }}
    }
    

  return result_222228;

}

function format_value_222688(result_222691, result_222691_Idx, value_222692, specifier_222693) {
    var spec_222694 = parse_standard_format_specifier_222322(specifier_222693, 0, false);
    var value_222695 = nimCopy(null, value_222692, NTI46040);
    switch (spec_222694.typ) {
    case 115:
    case 0:
      break;
    default: 
      var eHEX60gensym222698_222803 = null;
      eHEX60gensym222698_222803 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
      eHEX60gensym222698_222803.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_222694.typ]), NTI46040);
      eHEX60gensym222698_222803.parent = null;
      raiseException(eHEX60gensym222698_222803, "ValueError");
      break;
    }
    if (!((spec_222694.precision == -1))) {
    if ((spec_222694.precision < nucruneLen(value_222695))) {
    (value_222695 == null ? value_222695 = mnewString(chckRange(rune_offset_122244(value_222695, chckRange(spec_222694.precision, 0, 2147483647), 0), 0, 2147483647)) : value_222695.length = chckRange(rune_offset_122244(value_222695, chckRange(spec_222694.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    if (result_222691[result_222691_Idx] != null) { result_222691[result_222691_Idx] = (result_222691[result_222691_Idx]).concat(align_string_222222(value_222695, spec_222694.minimumWidth, spec_222694.align, spec_222694.fill)); } else { result_222691[result_222691_Idx] = align_string_222222(value_222695, spec_222694.minimumWidth, spec_222694.align, spec_222694.fill).slice(); };

  
}

function HEX5BHEX5D_124681(s_124685, x_124687) {
  var result_124688 = null;

    var a_124801 = x_124687.a;
    var l_125001 = addInt(subInt(x_124687.b, a_124801), 1);
    result_124688 = nimCopy(null, mnewString(chckRange(l_125001, 0, 2147483647)), NTI46040);
    L1: do {
      var i_125009 = 0;
      var i_225655 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_225655 < l_125001)) break L3;
            i_125009 = i_225655;
            result_124688[chckIndx(i_125009, 0, (result_124688 != null ? result_124688.length : 0)+0-1)-0] = s_124685[chckIndx(addInt(i_125009, a_124801), 0, (s_124685 != null ? s_124685.length : 0)+0-1)-0];
            i_225655 = addInt(i_225655, 1);
          }
      } while(false);
    } while(false);

  return result_124688;

}

function HEX2EHEX2E_225033(b_225036) {
  var result_225038 = {a: 0, b: 0};

    nimCopy(result_225038, {a: 0, b: b_225036}, NTI114907);

  return result_225038;

}

function to_float_55059(i_55061) {
  var result_55062 = 0.0;

    result_55062 = i_55061;

  return result_55062;

}

function HEX2F_76032(x_76034, y_76035) {
  var result_76036 = 0.0;

    result_76036 = (to_float_55059(x_76034) / to_float_55059(y_76035));

  return result_76036;

}

function epoch_time_220601() {
  var result_220603 = 0.0;

    result_220603 = HEX2F_76032(new Date().getTime(), 1000);

  return result_220603;

}

function sys_fatal_60262(message_60266) {
    var e_60403 = null;
    e_60403 = {m_type: NTI49450, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    e_60403.message = nimCopy(null, message_60266, NTI46040);
    raiseException(e_60403, "AssertionError");

  
}

function raise_assert_60258(msg_60260) {
    sys_fatal_60262(msg_60260);

  
}

function failed_assert_impl_60466(msg_60468) {
    raise_assert_60258(msg_60468);

  
}

function mk_digit_222041(v_222043, typ_222044) {
      var Tmp1;

  var result_222045 = null;

    if (!((v_222043 < 26))) {
    failed_assert_impl_60466(makeNimstrLit("strformat.nim(270, 9) `v < 26` "));
    }
    
    if ((v_222043 < 10)) {
    result_222045 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_222043), 0, 255)), NTI46040);
    }
    else {
      if ((typ_222044 == 120)) {
      Tmp1 = 97;
      }
      else {
      Tmp1 = 65;
      }
      
      result_222045 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_222043), 10), 0, 255)), NTI46040);
    }
    

  return result_222045;

}

function format_int_225210(n_225213, radix_225214, spec_225215) {
    var Tmp7;

  var result_225216 = null;

    var v_225401 = n_225213;
    var negative_225402 = (v_225401 < 0);
    if (negative_225402) {
    v_225401 = mulInt(v_225401, -1);
    }
    
    var xx_225403 = [];
    if (spec_225215.alternateForm) {
    switch (spec_225215.typ) {
    case 88:
      xx_225403 = nimCopy(null, makeNimstrLit("0x"), NTI46040);
      break;
    case 120:
      xx_225403 = nimCopy(null, makeNimstrLit("0x"), NTI46040);
      break;
    case 98:
      xx_225403 = nimCopy(null, makeNimstrLit("0b"), NTI46040);
      break;
    case 111:
      xx_225403 = nimCopy(null, makeNimstrLit("0o"), NTI46040);
      break;
    default: 
      break;
    }
    }
    
    if ((v_225401 == 0)) {
    result_225216 = nimCopy(null, makeNimstrLit("0"), NTI46040);
    }
    else {
      result_225216 = nimCopy(null, [], NTI46040);
      L1: do {
          L2: while (true) {
          if (!(0 < v_225401)) break L2;
            var d_225406 = modInt(v_225401, radix_225214);
            v_225401 = divInt(v_225401, radix_225214);
            if (result_225216 != null) { result_225216 = (result_225216).concat(mk_digit_222041(chckRange(d_225406, -2147483648, 2147483647), spec_225215.typ)); } else { result_225216 = mk_digit_222041(chckRange(d_225406, -2147483648, 2147483647), spec_225215.typ).slice(); };
          }
      } while(false);
      L3: do {
        var idx_225415 = 0;
        var colontmp__225666 = 0;
        colontmp__225666 = divInt((result_225216 != null ? result_225216.length : 0), 2);
        var i_225667 = 0;
        L4: do {
            L5: while (true) {
            if (!(i_225667 < colontmp__225666)) break L5;
              idx_225415 = i_225667;
              var Tmp6 = result_225216[chckIndx(idx_225415, 0, (result_225216 != null ? result_225216.length : 0)+0-1)-0]; result_225216[chckIndx(idx_225415, 0, (result_225216 != null ? result_225216.length : 0)+0-1)-0] = result_225216[chckIndx(subInt(subInt((result_225216 != null ? result_225216.length : 0), idx_225415), 1), 0, (result_225216 != null ? result_225216.length : 0)+0-1)-0]; result_225216[chckIndx(subInt(subInt((result_225216 != null ? result_225216.length : 0), idx_225415), 1), 0, (result_225216 != null ? result_225216.length : 0)+0-1)-0] = Tmp6;              i_225667 = addInt(i_225667, 1);
            }
        } while(false);
      } while(false);
    }
    
    if (spec_225215.padWithZero) {
    if (negative_225402) Tmp7 = true; else {      Tmp7 = !((spec_225215.sign == 45));    }    var sign_225431 = Tmp7;
    var to_fill_225436 = subInt(subInt(subInt(spec_225215.minimumWidth, (result_225216 != null ? result_225216.length : 0)), (xx_225403 != null ? xx_225403.length : 0)), (sign_225431 ? 1:0));
    if ((0 < to_fill_225436)) {
    result_225216 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_225436, 0, 2147483647)) || []).concat(result_225216 || []), NTI46040);
    }
    
    }
    
    if (negative_225402) {
    result_225216 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_225403 || [],result_225216 || []), NTI46040);
    }
    else {
    if (!((spec_225215.sign == 45))) {
    result_225216 = nimCopy(null, [spec_225215.sign].concat(xx_225403 || [],result_225216 || []), NTI46040);
    }
    else {
      result_225216 = nimCopy(null, (xx_225403 || []).concat(result_225216 || []), NTI46040);
    }
    }
    if ((spec_225215.align == 60)) {
    L8: do {
      var i_225442 = 0;
      var colontmp__225670 = 0;
      var colontmp__225671 = 0;
      colontmp__225670 = (result_225216 != null ? result_225216.length : 0);
      colontmp__225671 = spec_225215.minimumWidth;
      var i_225672 = colontmp__225670;
      L9: do {
          L10: while (true) {
          if (!(i_225672 < colontmp__225671)) break L10;
            i_225442 = i_225672;
            if (result_225216 != null) { addChar(result_225216, spec_225215.fill); } else { result_225216 = [spec_225215.fill]; };
            i_225672 = addInt(i_225672, 1);
          }
      } while(false);
    } while(false);
    }
    else {
      var to_fill_225443 = subInt(spec_225215.minimumWidth, (result_225216 != null ? result_225216.length : 0));
      if ((spec_225215.align == 94)) {
      var half_225444 = divInt(to_fill_225443, 2);
      result_225216 = nimCopy(null, (nsuRepeatChar(spec_225215.fill, chckRange(half_225444, 0, 2147483647)) || []).concat(result_225216 || [],nsuRepeatChar(spec_225215.fill, chckRange(subInt(to_fill_225443, half_225444), 0, 2147483647)) || []), NTI46040);
      }
      else {
        if ((0 < to_fill_225443)) {
        result_225216 = nimCopy(null, (nsuRepeatChar(spec_225215.fill, chckRange(to_fill_225443, 0, 2147483647)) || []).concat(result_225216 || []), NTI46040);
        }
        
      }
      
    }
    

  return result_225216;

}

function format_value_225139(result_225142, result_225142_Idx, value_225143, specifier_225144) {
  BeforeRet: do {
    if (((specifier_225144 != null ? specifier_225144.length : 0) == 0)) {
    if (result_225142[result_225142_Idx] != null) { result_225142[result_225142_Idx] = (result_225142[result_225142_Idx]).concat(cstrToNimstr((value_225143)+"")); } else { result_225142[result_225142_Idx] = cstrToNimstr((value_225143)+"").slice(); };
    break BeforeRet;
    }
    
    var spec_225145 = parse_standard_format_specifier_222322(specifier_225144, 0, false);
    var radix_225147 = 10;
    switch (spec_225145.typ) {
    case 120:
    case 88:
      radix_225147 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_225147 = 2;
      break;
    case 111:
      radix_225147 = 8;
      break;
    default: 
      var eHEX60gensym225149_225203 = null;
      eHEX60gensym225149_225203 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
      eHEX60gensym225149_225203.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_225145.typ]), NTI46040);
      eHEX60gensym225149_225203.parent = null;
      raiseException(eHEX60gensym225149_225203, "ValueError");
      break;
    }
    if (result_225142[result_225142_Idx] != null) { result_225142[result_225142_Idx] = (result_225142[result_225142_Idx]).concat(format_int_225210(value_225143, radix_225147, spec_225145)); } else { result_225142[result_225142_Idx] = format_int_225210(value_225143, radix_225147, spec_225145).slice(); };
  } while (false);

  
}

function nsuformatBiggestFloat(f_201021, format_201022, precision_201027, decimal_sep_201028) {
  var result_201029 = null;

    var precision_201201 = precision_201027;
    if ((precision_201201 == -1)) {
    precision_201201 = 6;
    }
    
    var res_201202 = null;
    switch (format_201022) {
    case 0:
      res_201202 = f_201021.toString();
      break;
    case 1:
      res_201202 = f_201021.toFixed(precision_201201);
      break;
    case 2:
      res_201202 = f_201021.toExponential(precision_201201);
      break;
    }
    result_201029 = nimCopy(null, cstrToNimstr(res_201202), NTI46040);
    if (((1.0000000000000000e+00 / f_201021) == -Infinity)) {
    result_201029 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_201202) || []), NTI46040);
    }
    
    L1: do {
      var i_201210 = 0;
      var colontmp__225677 = 0;
      colontmp__225677 = (result_201029 != null ? result_201029.length : 0);
      var i_225678 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_225678 < colontmp__225677)) break L3;
            i_201210 = i_225678;
            if ((ConstSet9[result_201029[chckIndx(i_201210, 0, (result_201029 != null ? result_201029.length : 0)+0-1)-0]] != undefined)) {
            result_201029[chckIndx(i_201210, 0, (result_201029 != null ? result_201029.length : 0)+0-1)-0] = decimal_sep_201028;
            }
            
            i_225678 = addInt(i_225678, 1);
          }
      } while(false);
    } while(false);

  return result_201029;

}

function nsuformatFloat(f_201248, format_201249, precision_201254, decimal_sep_201255) {
  var result_201256 = null;

    result_201256 = nimCopy(null, nsuformatBiggestFloat(f_201248, format_201249, precision_201254, decimal_sep_201255), NTI46040);

  return result_201256;

}

function decode_91640(s_91642) {

    function decode_size_91644(size_91646) {
      var result_91647 = 0;

      BeforeRet: do {
        result_91647 = addInt(divInt(mulInt(size_91646, 3), 4), 6);
        break BeforeRet;
      } while (false);

      return result_91647;

    }

  var result_91643 = null;

  BeforeRet: do {
    if (((s_91642 != null ? s_91642.length : 0) == 0)) {
    break BeforeRet;
    }
    
    (result_91643 == null ? result_91643 = mnewString(chckRange(decode_size_91644((s_91642 != null ? s_91642.length : 0)), 0, 2147483647)) : result_91643.length = chckRange(decode_size_91644((s_91642 != null ? s_91642.length : 0)), 0, 2147483647));
    var input_index_91686 = 0;
    var output_index_91688 = 0;
    var input_len_91689 = (s_91642 != null ? s_91642.length : 0);
    var input_ends_91691 = 0;
    L1: do {
        L2: while (true) {
        if (!(ConstSet10[s_91642[chckIndx(subInt(input_len_91689, 1), 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]] != undefined)) break L2;
          input_len_91689 = subInt(input_len_91689, 1);
        }
    } while(false);
    input_ends_91691 = subInt(input_len_91689, 4);
    L3: do {
        L4: while (true) {
        if (!(input_index_91686 <= input_ends_91691)) break L4;
          L5: do {
              L6: while (true) {
              if (!(ConstSet11[s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]] != undefined)) break L6;
                input_index_91686 = addInt(input_index_91686, 1);
              }
          } while(false);
          var a_91730 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
          input_index_91686 = addInt(input_index_91686, 1);
          if ((a_91730 == 255)) {
          var eHEX60gensym91750_91803 = null;
          eHEX60gensym91750_91803 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
          eHEX60gensym91750_91803.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
          eHEX60gensym91750_91803.parent = null;
          raiseException(eHEX60gensym91750_91803, "ValueError");
          }
          
          var b_91822 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
          input_index_91686 = addInt(input_index_91686, 1);
          if ((b_91822 == 255)) {
          var eHEX60gensym91842_92003 = null;
          eHEX60gensym91842_92003 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
          eHEX60gensym91842_92003.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
          eHEX60gensym91842_92003.parent = null;
          raiseException(eHEX60gensym91842_92003, "ValueError");
          }
          
          var c_92022 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
          input_index_91686 = addInt(input_index_91686, 1);
          if ((c_92022 == 255)) {
          var eHEX60gensym92042_92203 = null;
          eHEX60gensym92042_92203 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
          eHEX60gensym92042_92203.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
          eHEX60gensym92042_92203.parent = null;
          raiseException(eHEX60gensym92042_92203, "ValueError");
          }
          
          var d_92222 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
          input_index_91686 = addInt(input_index_91686, 1);
          if ((d_92222 == 255)) {
          var eHEX60gensym92242_92403 = null;
          eHEX60gensym92242_92403 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
          eHEX60gensym92242_92403.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
          eHEX60gensym92242_92403.parent = null;
          raiseException(eHEX60gensym92242_92403, "ValueError");
          }
          
          result_91643[chckIndx(output_index_91688, 0, (result_91643 != null ? result_91643.length : 0)+0-1)-0] = chckRange((((a_91730 << 2) | (b_91822 >> 4)) & 255), 0, 255);
          output_index_91688 = addInt(output_index_91688, 1);
          result_91643[chckIndx(output_index_91688, 0, (result_91643 != null ? result_91643.length : 0)+0-1)-0] = chckRange((((b_91822 << 4) | (c_92022 >> 2)) & 255), 0, 255);
          output_index_91688 = addInt(output_index_91688, 1);
          result_91643[chckIndx(output_index_91688, 0, (result_91643 != null ? result_91643.length : 0)+0-1)-0] = chckRange((((c_92022 << 6) | (d_92222 >> 0)) & 255), 0, 255);
          output_index_91688 = addInt(output_index_91688, 1);
        }
    } while(false);
    var left_len_92479 = absInt(modInt(subInt(input_index_91686, input_len_91689), 4));
    if ((left_len_92479 == 2)) {
    var a_92492 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
    input_index_91686 = addInt(input_index_91686, 1);
    if ((a_92492 == 255)) {
    var eHEX60gensym92512_92603 = null;
    eHEX60gensym92512_92603 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym92512_92603.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
    eHEX60gensym92512_92603.parent = null;
    raiseException(eHEX60gensym92512_92603, "ValueError");
    }
    
    var b_92622 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
    input_index_91686 = addInt(input_index_91686, 1);
    if ((b_92622 == 255)) {
    var eHEX60gensym92642_92803 = null;
    eHEX60gensym92642_92803 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym92642_92803.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
    eHEX60gensym92642_92803.parent = null;
    raiseException(eHEX60gensym92642_92803, "ValueError");
    }
    
    result_91643[chckIndx(output_index_91688, 0, (result_91643 != null ? result_91643.length : 0)+0-1)-0] = chckRange((((a_92492 << 2) | (b_92622 >> 4)) & 255), 0, 255);
    output_index_91688 = addInt(output_index_91688, 1);
    }
    else {
    if ((left_len_92479 == 3)) {
    var a_92845 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
    input_index_91686 = addInt(input_index_91686, 1);
    if ((a_92845 == 255)) {
    var eHEX60gensym92865_93003 = null;
    eHEX60gensym92865_93003 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym92865_93003.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
    eHEX60gensym92865_93003.parent = null;
    raiseException(eHEX60gensym92865_93003, "ValueError");
    }
    
    var b_93022 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
    input_index_91686 = addInt(input_index_91686, 1);
    if ((b_93022 == 255)) {
    var eHEX60gensym93042_93203 = null;
    eHEX60gensym93042_93203 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym93042_93203.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
    eHEX60gensym93042_93203.parent = null;
    raiseException(eHEX60gensym93042_93203, "ValueError");
    }
    
    var c_93222 = ((decode_table_91611[chckIndx(s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0], 0, (decode_table_91611 != null ? decode_table_91611.length : 0)+0-1)-0])|0);
    input_index_91686 = addInt(input_index_91686, 1);
    if ((c_93222 == 255)) {
    var eHEX60gensym93242_93403 = null;
    eHEX60gensym93242_93403 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym93242_93403.message = nimCopy(null, (makeNimstrLit("Invalid base64 format character `") || []).concat([s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0]],makeNimstrLit("` (ord ") || [],cstrToNimstr((s_91642[chckIndx(input_index_91686, 0, (s_91642 != null ? s_91642.length : 0)+0-1)-0])+"") || [],makeNimstrLit(") at location ") || [],cstrToNimstr((input_index_91686)+"") || [],makeNimstrLit(".") || []), NTI46040);
    eHEX60gensym93242_93403.parent = null;
    raiseException(eHEX60gensym93242_93403, "ValueError");
    }
    
    result_91643[chckIndx(output_index_91688, 0, (result_91643 != null ? result_91643.length : 0)+0-1)-0] = chckRange((((a_92845 << 2) | (b_93022 >> 4)) & 255), 0, 255);
    output_index_91688 = addInt(output_index_91688, 1);
    result_91643[chckIndx(output_index_91688, 0, (result_91643 != null ? result_91643.length : 0)+0-1)-0] = chckRange((((b_93022 << 4) | (c_93222 >> 2)) & 255), 0, 255);
    output_index_91688 = addInt(output_index_91688, 1);
    }
    }
    (result_91643 == null ? result_91643 = mnewString(chckRange(output_index_91688, 0, 2147483647)) : result_91643.length = chckRange(output_index_91688, 0, 2147483647));
  } while (false);

  return result_91643;

}
var str_size_225016 = 131072;
var tries_225019 = 8192;
var str_225020 = nsuRepeatChar(97, str_size_225016);
var str2_225022 = [encode_91086(str_225020)];
var fmt_res_225026 = [mnewString(0)];
if (fmt_res_225026[0] != null) { fmt_res_225026[0] = (fmt_res_225026[0]).concat(makeNimstrLit("encode ")); } else { fmt_res_225026[0] = makeNimstrLit("encode "); };
format_value_222688(fmt_res_225026, 0, HEX5BHEX5D_124681(str_225020, HEX2EHEX2E_225033(3)), []);
if (fmt_res_225026[0] != null) { fmt_res_225026[0] = (fmt_res_225026[0]).concat(makeNimstrLit("... to ")); } else { fmt_res_225026[0] = makeNimstrLit("... to "); };
format_value_222688(fmt_res_225026, 0, HEX5BHEX5D_124681(str2_225022[0], HEX2EHEX2E_225033(3)), []);
if (fmt_res_225026[0] != null) { fmt_res_225026[0] = (fmt_res_225026[0]).concat(makeNimstrLit("...: ")); } else { fmt_res_225026[0] = makeNimstrLit("...: "); };
rawEcho(fmt_res_225026[0]);
var t_225120 = [epoch_time_220601()];
var i_225122 = [0];
var s_225123 = [0];
L1: do {
    L2: while (true) {
    if (!(i_225122[0] < tries_225019)) break L2;
      str2_225022[0] = nimCopy(null, encode_91086(str_225020), NTI46040);
      s_225123[0] += (str2_225022[0] != null ? str2_225022[0].length : 0);
      i_225122[0] += 1;
    }
} while(false);
var fmt_res_225137 = [mnewString(0)];
format_value_225139(fmt_res_225137, 0, s_225123[0], []);
if (fmt_res_225137[0] != null) { fmt_res_225137[0] = (fmt_res_225137[0]).concat(makeNimstrLit(", ")); } else { fmt_res_225137[0] = makeNimstrLit(", "); };
format_value_222688(fmt_res_225137, 0, nsuformatFloat((epoch_time_220601() - t_225120[0]), 0, 6, 46), []);
rawEcho(fmt_res_225137[0]);
var str3_225476 = [decode_91640(str2_225022[0])];
var fmt_res_225477 = [mnewString(0)];
if (fmt_res_225477[0] != null) { fmt_res_225477[0] = (fmt_res_225477[0]).concat(makeNimstrLit("decode ")); } else { fmt_res_225477[0] = makeNimstrLit("decode "); };
format_value_222688(fmt_res_225477, 0, HEX5BHEX5D_124681(str2_225022[0], HEX2EHEX2E_225033(3)), []);
if (fmt_res_225477[0] != null) { fmt_res_225477[0] = (fmt_res_225477[0]).concat(makeNimstrLit("... to ")); } else { fmt_res_225477[0] = makeNimstrLit("... to "); };
format_value_222688(fmt_res_225477, 0, HEX5BHEX5D_124681(str3_225476[0], HEX2EHEX2E_225033(3)), []);
if (fmt_res_225477[0] != null) { fmt_res_225477[0] = (fmt_res_225477[0]).concat(makeNimstrLit("...: ")); } else { fmt_res_225477[0] = makeNimstrLit("...: "); };
rawEcho(fmt_res_225477[0]);
t_225120[0] = epoch_time_220601();
i_225122[0] = 0;
s_225123[0] = 0;
L3: do {
    L4: while (true) {
    if (!(i_225122[0] < tries_225019)) break L4;
      str3_225476[0] = nimCopy(null, decode_91640(str2_225022[0]), NTI46040);
      s_225123[0] += (str3_225476[0] != null ? str3_225476[0].length : 0);
      i_225122[0] += 1;
    }
} while(false);
var fmt_res_225559 = [mnewString(0)];
format_value_225139(fmt_res_225559, 0, s_225123[0], []);
if (fmt_res_225559[0] != null) { fmt_res_225559[0] = (fmt_res_225559[0]).concat(makeNimstrLit(", ")); } else { fmt_res_225559[0] = makeNimstrLit(", "); };
format_value_222688(fmt_res_225559, 0, nsuformatFloat((epoch_time_220601() - t_225120[0]), 0, 6, 46), []);
rawEcho(fmt_res_225559[0]);
