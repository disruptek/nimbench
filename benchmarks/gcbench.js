/* Generated by the Nim Compiler v1.1.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI198315 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI46040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI198318 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
NTI198318.base = NTI46040;
NTI198315.base = NTI46040;

function toJSStr(s_72304) {
                    var Tmp5;
            var Tmp7;

  var result_72305 = null;

    var res_72378 = new_seq_72336((s_72304 != null ? s_72304.length : 0));
    var i_72380 = 0;
    var j_72382 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_72380 < (s_72304 != null ? s_72304.length : 0))) break L2;
          var c_72383 = s_72304[i_72380];
          if ((c_72383 < 128)) {
          res_72378[j_72382] = String.fromCharCode(c_72383);
          i_72380 += 1;
          }
          else {
            var helper_72406 = new_seq_72336(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_72407 = c_72383.toString(16);
                  if (((code_72407 != null ? code_72407.length : 0) == 1)) {
                  if (helper_72406 != null) { helper_72406.push("%0"); } else { helper_72406 = ["%0"]; };
                  }
                  else {
                  if (helper_72406 != null) { helper_72406.push("%"); } else { helper_72406 = ["%"]; };
                  }
                  
                  if (helper_72406 != null) { helper_72406.push(code_72407); } else { helper_72406 = [code_72407]; };
                  i_72380 += 1;
                    if (((s_72304 != null ? s_72304.length : 0) <= i_72380)) Tmp5 = true; else {                      Tmp5 = (s_72304[i_72380] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_72383 = s_72304[i_72380];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_72378[j_72382] = decodeURIComponent(helper_72406.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_72378[j_72382] = helper_72406.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_72382 += 1;
        }
    } while(false);
    if (res_72378 === null) res_72378 = [];
               if (res_72378.length < j_72382) { for (var i=res_72378.length;i<j_72382;++i) res_72378.push(null); }
               else { res_72378.length = j_72382; };
    result_72305 = res_72378.join("");

  return result_72305;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function makeNimstrLit(c_72270) {
      var ln = c_72270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_72270.charCodeAt(i);
  }
  return result;
  

  
}
    var coll_prefixes_198320 = [[], makeNimstrLit("k"), makeNimstrLit("M"), makeNimstrLit("G"), makeNimstrLit("T"), makeNimstrLit("P"), makeNimstrLit("E"), makeNimstrLit("Z"), makeNimstrLit("Y")];

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_73827, src_73828, ti_73829) {
  var result_74019 = null;

    switch (ti_73829.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_73801(ti_73829))) {
      result_74019 = src_73828;
      }
      else {
        result_74019 = [src_73828[0], src_73828[1]];
      }
      
      break;
    case 19:
            if (dest_73827 === null || dest_73827 === undefined) {
        dest_73827 = {};
      }
      else {
        for (var key in dest_73827) { delete dest_73827[key]; }
      }
      for (var key in src_73828) { dest_73827[key] = src_73828[key]; }
      result_74019 = dest_73827;
    
      break;
    case 18:
    case 17:
      if (!((ti_73829.base == null))) {
      result_74019 = nimCopy(dest_73827, src_73828, ti_73829.base);
      }
      else {
      if ((ti_73829.kind == 17)) {
      result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {m_type: ti_73829} : dest_73827;
      }
      else {
        result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {} : dest_73827;
      }
      }
      nimCopyAux(result_74019, src_73828, ti_73829.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_73828 === null) {
        result_74019 = null;
      }
      else {
        if (dest_73827 === null || dest_73827 === undefined) {
          dest_73827 = new Array(src_73828.length);
        }
        else {
          dest_73827.length = src_73828.length;
        }
        result_74019 = dest_73827;
        for (var i = 0; i < src_73828.length; ++i) {
          result_74019[i] = nimCopy(result_74019[i], src_73828[i], ti_73829.base);
        }
      }
    
      break;
    case 28:
            if (src_73828 !== null) {
        result_74019 = src_73828.slice(0);
      }
    
      break;
    default: 
      result_74019 = src_73828;
      break;
    }

  return result_74019;

}
      var iec_prefixes_198317 = [[], makeNimstrLit("Ki"), makeNimstrLit("Mi"), makeNimstrLit("Gi"), makeNimstrLit("Ti"), makeNimstrLit("Pi"), makeNimstrLit("Ei"), makeNimstrLit("Zi"), makeNimstrLit("Yi")];

function cstrToNimstr(c_72287) {
      var ln = c_72287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_72287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_72287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet2 = setConstr(46, 44);

function nimMin(a_73203, b_73204) {
    var Tmp1;

  var result_73205 = 0;

  BeforeRet: do {
    if ((a_73203 <= b_73204)) {
    Tmp1 = a_73203;
    }
    else {
    Tmp1 = b_73204;
    }
    
    result_73205 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_73205;

}

function mnewString(len_72463) {
        return new Array(len_72463);
  

  
}
var nim_program_result = 0;
var global_raise_hook_64018 = [null];
var local_raise_hook_64023 = [null];
var out_of_mem_hook_64026 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var utc_instance_211431 = [null];
var local_instance_211432 = [null];

function new_seq_72336(len_72339) {
  var result_72341 = null;

    result_72341 = new Array(len_72339); for (var i=0;i<len_72339;++i) {result_72341[i]=null;}
  return result_72341;

}

function is_fat_pointer_73801(ti_73803) {
  var result_73804 = false;

  BeforeRet: do {
    result_73804 = !((ConstSet1[ti_73803.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_73804;

}

function nimCopyAux(dest_73832, src_73833, n_73835) {
    switch (n_73835.kind) {
    case 0:
      break;
    case 1:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_73835.sons.length; i++) {
      nimCopyAux(dest_73832, src_73833, n_73835.sons[i]);
    }
    
      break;
    case 3:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
      for (var i = 0; i < n_73835.sons.length; ++i) {
        nimCopyAux(dest_73832, src_73833, n_73835.sons[i][1]);
      }
    
      break;
    }

  
}

function nsuformatBiggestFloat(f_198021, format_198022, precision_198027, decimal_sep_198028) {
  var result_198029 = null;

    var precision_198201 = precision_198027;
    if ((precision_198201 == -1)) {
    precision_198201 = 6;
    }
    
    var res_198202 = null;
    switch (format_198022) {
    case 0:
      res_198202 = f_198021.toString();
      break;
    case 1:
      res_198202 = f_198021.toFixed(precision_198201);
      break;
    case 2:
      res_198202 = f_198021.toExponential(precision_198201);
      break;
    }
    result_198029 = nimCopy(null, cstrToNimstr(res_198202), NTI46040);
    if (((1.0000000000000000e+00 / f_198021) == -Infinity)) {
    result_198029 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_198202) || []), NTI46040);
    }
    
    L1: do {
      var i_198210 = 0;
      var colontmp__220030 = 0;
      colontmp__220030 = (result_198029 != null ? result_198029.length : 0);
      var i_220031 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_220031 < colontmp__220030)) break L3;
            i_198210 = i_220031;
            if ((ConstSet2[result_198029[i_198210]] != undefined)) {
            result_198029[i_198210] = decimal_sep_198028;
            }
            
            i_220031 += 1;
          }
      } while(false);
    } while(false);

  return result_198029;

}

function nsuformatFloat(f_198248, format_198249, precision_198254, decimal_sep_198255) {
  var result_198256 = null;

    result_198256 = nimCopy(null, nsuformatBiggestFloat(f_198248, format_198249, precision_198254, decimal_sep_198255), NTI46040);

  return result_198256;

}

function nsuFindChar(s_195816, sub_195817, start_195818, last_195819) {
    var Tmp1;

  var result_195821 = 0;

  BeforeRet: do {
    if ((last_195819 == 0)) {
    Tmp1 = (s_195816 != null ? (s_195816.length-1) : -1);
    }
    else {
    Tmp1 = last_195819;
    }
    
    var last_195823 = Tmp1;
    L2: do {
      var i_196206 = 0;
      var colontmp__220044 = 0;
      colontmp__220044 = start_195818;
      var res_220045 = colontmp__220044;
      L3: do {
          L4: while (true) {
          if (!(res_220045 <= last_195823)) break L4;
            i_196206 = res_220045;
            if ((sub_195817 == s_195816[i_196206])) {
            result_195821 = i_196206;
            break BeforeRet;
            }
            
            res_220045 += 1;
          }
      } while(false);
    } while(false);
    result_195821 = -1;
    break BeforeRet;
  } while (false);

  return result_195821;

}

function nsuDelete(s_195071, s_195071_Idx, first_195072, last_195073) {
    var i_195074 = first_195072;
    var j_195075 = nimMin((s_195071[s_195071_Idx] != null ? s_195071[s_195071_Idx].length : 0), (last_195073 + 1));
    var new_len_195076 = (((s_195071[s_195071_Idx] != null ? s_195071[s_195071_Idx].length : 0) - j_195075) + i_195074);
    L1: do {
        L2: while (true) {
        if (!(i_195074 < new_len_195076)) break L2;
          s_195071[s_195071_Idx][i_195074] = s_195071[s_195071_Idx][j_195075];
          i_195074 += 1;
          j_195075 += 1;
        }
    } while(false);
    (s_195071[s_195071_Idx] == null ? s_195071[s_195071_Idx] = mnewString(new_len_195076) : s_195071[s_195071_Idx].length = new_len_195076);

  
}

function trim_zeros_198270(x_198273, x_198273_Idx, decimal_sep_198274) {
    var Tmp1;
          var Tmp4;

    var s_pos_198275 = nsuFindChar(x_198273[x_198273_Idx], decimal_sep_198274, 0, 0);
    if ((0 <= s_pos_198275)) {
    var last_198276 = nsuFindChar(x_198273[x_198273_Idx], 101, s_pos_198275, 0);
    if ((0 <= last_198276)) {
    Tmp1 = (last_198276 - 1);
    }
    else {
    Tmp1 = (x_198273[x_198273_Idx] != null ? (x_198273[x_198273_Idx].length-1) : -1);
    }
    
    last_198276 = Tmp1;
    var pos_198278 = last_198276;
    L2: do {
        L3: while (true) {
          if (!(0 <= pos_198278)) Tmp4 = false; else {            Tmp4 = (x_198273[x_198273_Idx][pos_198278] == 48);          }        if (!Tmp4) break L3;
          pos_198278 -= 1;
        }
    } while(false);
    if ((s_pos_198275 < pos_198278)) {
    pos_198278 += 1;
    }
    
    nsuDelete(x_198273, x_198273_Idx, pos_198278, last_198276);
    }
    

  
}

function format_size_198308(bytes_198310, decimal_sep_198311, prefix_198312, include_space_198313) {
  var result_198314 = [null];

    var xb_198321 = bytes_198310;
    var fbytes_198322 = 0.0;
    var last_xb_198323 = bytes_198310;
    var matched_index_198324 = 0;
    var prefixes_198328 = [null, null, null, null, null, null, null, null, null];
    if ((prefix_198312 == 1)) {
    nimCopy(prefixes_198328, coll_prefixes_198320, NTI198318);
    }
    else {
      nimCopy(prefixes_198328, iec_prefixes_198317, NTI198315);
    }
    
    L1: do {
      var index_198362 = 0;
      var i_220025 = 1;
      L2: do {
          L3: while (true) {
          if (!(i_220025 < 9)) break L3;
            index_198362 = i_220025;
            last_xb_198323 = xb_198321;
            xb_198321 = Math.trunc(bytes_198310 / (1 << (index_198362 * 10)));
            matched_index_198324 = index_198362;
            if ((xb_198321 == 0)) {
            xb_198321 = last_xb_198323;
            matched_index_198324 = (index_198362 - 1);
            break L1;
            }
            
            i_220025 += 1;
          }
      } while(false);
    } while(false);
    fbytes_198322 = (bytes_198310 / (1 << (matched_index_198324 * 10)));
    result_198314[0] = nimCopy(null, nsuformatFloat(fbytes_198322, 1, 3, decimal_sep_198311), NTI46040);
    trim_zeros_198270(result_198314, 0, decimal_sep_198311);
    if (include_space_198313) {
    if (result_198314[0] != null) { result_198314[0] = (result_198314[0]).concat(makeNimstrLit(" ")); } else { result_198314[0] = makeNimstrLit(" "); };
    }
    
    if (result_198314[0] != null) { result_198314[0] = (result_198314[0]).concat(prefixes_198328[matched_index_198324]); } else { result_198314[0] = prefixes_198328[matched_index_198324].slice(); };
    if (result_198314[0] != null) { result_198314[0] = (result_198314[0]).concat(makeNimstrLit("B")); } else { result_198314[0] = makeNimstrLit("B"); };

  return result_198314[0];

}

function get_total_mem_55608() {
  var result_69035 = 0;

  BeforeRet: do {
    result_69035 = -1;
    break BeforeRet;
  } while (false);

  return result_69035;

}

function get_free_mem_55606() {
  var result_69019 = 0;

  BeforeRet: do {
    result_69019 = -1;
    break BeforeRet;
  } while (false);

  return result_69019;

}

function print_diagnostics_219305() {
    rawEcho((makeNimstrLit("Total memory available: ") || []).concat(format_size_198308(get_total_mem_55608(), 46, 0, false) || [],makeNimstrLit(" bytes") || []));
    rawEcho((makeNimstrLit("Free memory: ") || []).concat(format_size_198308(get_free_mem_55606(), 46, 0, false) || [],makeNimstrLit(" bytes") || []));

  
}

function to_float_55059(i_55061) {
  var result_55062 = 0.0;

    result_55062 = i_55061;

  return result_55062;

}

function HEX2F_76032(x_76034, y_76035) {
  var result_76036 = 0.0;

    result_76036 = (to_float_55059(x_76034) / to_float_55059(y_76035));

  return result_76036;

}

function epoch_time_217601() {
  var result_217603 = 0.0;

    result_217603 = HEX2F_76032(new Date().getTime(), 1000);

  return result_217603;

}

function new_node_219023(l_219027, r_219028) {
  var result_219029 = null;

    result_219029 = {left: null, right: null, i: 0, j: 0};
    result_219029.left = l_219027;
    result_219029.right = r_219028;

  return result_219029;

}

function make_tree_219282(i_depth_219284) {
  var result_219285 = null;

  BeforeRet: do {
    if ((i_depth_219284 <= 0)) {
    result_219285 = {left: null, right: null, i: 0, j: 0};
    }
    else {
      result_219285 = new_node_219023(make_tree_219282((i_depth_219284 - 1)), make_tree_219282((i_depth_219284 - 1)));
      break BeforeRet;
    }
    
  } while (false);

  return result_219285;

}

function populate_219253(i_depth_219255, this_node_219256) {
  BeforeRet: do {
    if ((i_depth_219255 <= 0)) {
    break BeforeRet;
    }
    else {
      this_node_219256.left = {left: null, right: null, i: 0, j: 0};
      this_node_219256.right = {left: null, right: null, i: 0, j: 0};
      populate_219253((i_depth_219255 - 1), this_node_219256.left);
      populate_219253((i_depth_219255 - 1), this_node_219256.right);
    }
    
  } while (false);

  
}

function tree_size_219214(i_219216) {
  var result_219217 = 0;

  BeforeRet: do {
    result_219217 = ((1 << (i_219216 + 1)) - 1);
    break BeforeRet;
  } while (false);

  return result_219217;

}

function num_iters_219236(i_219238) {
  var result_219239 = 0;

  BeforeRet: do {
    result_219239 = Math.trunc((2 * tree_size_219214(18)) / tree_size_219214(i_219238));
    break BeforeRet;
  } while (false);

  return result_219239;

}

function time_construction_219326(depth_219328) {
    var root_219329 = null;
    var temp_tree_219330 = null;
    var i_num_iters_219331 = 0;
    i_num_iters_219331 = num_iters_219236(depth_219328);
    rawEcho((makeNimstrLit("Creating ") || []).concat(cstrToNimstr((i_num_iters_219331)+"") || [],makeNimstrLit(" trees of depth ") || [],cstrToNimstr((depth_219328)+"") || []));
    var t_219335 = epoch_time_217601();
    L1: do {
      var i_219344 = 0;
      var colontmp__220053 = 0;
      colontmp__220053 = (i_num_iters_219331 - 1);
      var res_220054 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_220054 <= colontmp__220053)) break L3;
            i_219344 = res_220054;
            temp_tree_219330 = {left: null, right: null, i: 0, j: 0};
            populate_219253(depth_219328, temp_tree_219330);
            temp_tree_219330 = null;
            res_220054 += 1;
          }
      } while(false);
    } while(false);
    rawEcho((makeNimstrLit("\x09Top down construction took ") || []).concat(cstrToNimstr(((epoch_time_217601() - t_219335))+"") || [],makeNimstrLit("msecs") || []));
    t_219335 = epoch_time_217601();
    L4: do {
      var i_219362 = 0;
      var colontmp__220060 = 0;
      colontmp__220060 = (i_num_iters_219331 - 1);
      var res_220061 = 0;
      L5: do {
          L6: while (true) {
          if (!(res_220061 <= colontmp__220060)) break L6;
            i_219362 = res_220061;
            temp_tree_219330 = make_tree_219282(depth_219328);
            temp_tree_219330 = null;
            res_220061 += 1;
          }
      } while(false);
    } while(false);
    rawEcho((makeNimstrLit("\x09Bottom up construction took ") || []).concat(cstrToNimstr(((epoch_time_217601() - t_219335))+"") || [],makeNimstrLit("msecs") || []));

  
}

function main_219382() {
      var Tmp6;

    var root_219384 = null;
    var long_lived_tree_219385 = null;
    var temp_tree_219386 = null;
    var myarray_219387 = null;
    rawEcho(makeNimstrLit("Garbage Collector Test"));
    rawEcho(makeNimstrLit(" Stretching memory with a binary tree of depth 18"));
    print_diagnostics_219305();
    var t_219394 = epoch_time_217601();
    temp_tree_219386 = make_tree_219282(18);
    temp_tree_219386 = null;
    rawEcho(makeNimstrLit(" Creating a long-lived binary tree of depth 16"));
    long_lived_tree_219385 = {left: null, right: null, i: 0, j: 0};
    populate_219253(16, long_lived_tree_219385);
    rawEcho(makeNimstrLit(" Creating a long-lived array of 500000 doubles"));
    myarray_219387 = new Array(500000); for (var i=0;i<500000;++i) {myarray_219387[i]=0.0;}    L1: do {
      var i_219425 = 0;
      var res_220015 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_220015 <= 249999)) break L3;
            i_219425 = res_220015;
            myarray_219387[i_219425] = (1.0000000000000000e+00 / to_float_55059(i_219425));
            res_220015 += 1;
          }
      } while(false);
    } while(false);
    print_diagnostics_219305();
    var d_219427 = 4;
    L4: do {
        L5: while (true) {
        if (!(d_219427 <= 16)) break L5;
          time_construction_219326(d_219427);
          d_219427 += 2;
        }
    } while(false);
      if ((long_lived_tree_219385 == null)) Tmp6 = true; else {        Tmp6 = !((myarray_219387[1000] == 1.0000000000000000e-03));      }    if (Tmp6) {
    rawEcho(makeNimstrLit("Failed"));
    }
    
    var elapsed_219446 = (epoch_time_217601() - t_219394);
    print_diagnostics_219305();
    rawEcho((makeNimstrLit("Completed in ") || []).concat(cstrToNimstr((elapsed_219446)+"") || [],makeNimstrLit("s. Success!") || []));

  
}
main_219382();
