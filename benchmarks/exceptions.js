/* Generated by the Nim Compiler v1.1.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI206653 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI206612 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI206618 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI49408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI46040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI46042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI49508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI49426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46014 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI220029 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NNI220029 = {kind: 1, offset: "ticks", len: 0, typ: NTI46014, name: "ticks", sons: null};
NTI220029.node = NNI220029;
var NNI49452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49452.node = NNI49452;
var NNI49430 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49430.node = NNI49430;
NTI49508.base = NTI49426;
NTI49514.base = NTI49426;
var NNI49426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI49508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI46042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI46040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI46040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI46016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI49514, name: "up", sons: null}]};
NTI49426.node = NNI49426;
var NNI49408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49408.node = NNI49408;
NTI49426.base = NTI49408;
NTI49430.base = NTI49426;
NTI49452.base = NTI49430;
NTI206612.base = NTI206653;
var NNI206618 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI46014, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI206612, name: "nanosecond", sons: null}]};
NTI206618.node = NNI206618;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_73827, src_73828, ti_73829) {
  var result_74019 = null;

    switch (ti_73829.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_73801(ti_73829))) {
      result_74019 = src_73828;
      }
      else {
        result_74019 = [src_73828[0], src_73828[1]];
      }
      
      break;
    case 19:
            if (dest_73827 === null || dest_73827 === undefined) {
        dest_73827 = {};
      }
      else {
        for (var key in dest_73827) { delete dest_73827[key]; }
      }
      for (var key in src_73828) { dest_73827[key] = src_73828[key]; }
      result_74019 = dest_73827;
    
      break;
    case 18:
    case 17:
      if (!((ti_73829.base == null))) {
      result_74019 = nimCopy(dest_73827, src_73828, ti_73829.base);
      }
      else {
      if ((ti_73829.kind == 17)) {
      result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {m_type: ti_73829} : dest_73827;
      }
      else {
        result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {} : dest_73827;
      }
      }
      nimCopyAux(result_74019, src_73828, ti_73829.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_73828 === null) {
        result_74019 = null;
      }
      else {
        if (dest_73827 === null || dest_73827 === undefined) {
          dest_73827 = new Array(src_73828.length);
        }
        else {
          dest_73827.length = src_73828.length;
        }
        result_74019 = dest_73827;
        for (var i = 0; i < src_73828.length; ++i) {
          result_74019[i] = nimCopy(result_74019[i], src_73828[i], ti_73829.base);
        }
      }
    
      break;
    case 28:
            if (src_73828 !== null) {
        result_74019 = src_73828.slice(0);
      }
    
      break;
    default: 
      result_74019 = src_73828;
      break;
    }

  return result_74019;

}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr([48, 57]);

function makeNimstrLit(c_72270) {
      var ln = c_72270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_72270.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_72304) {
                    var Tmp5;
            var Tmp7;

  var result_72305 = null;

    var res_72378 = new_seq_72336((s_72304 != null ? s_72304.length : 0));
    var i_72380 = 0;
    var j_72382 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_72380 < (s_72304 != null ? s_72304.length : 0))) break L2;
          var c_72383 = s_72304[i_72380];
          if ((c_72383 < 128)) {
          res_72378[j_72382] = String.fromCharCode(c_72383);
          i_72380 += 1;
          }
          else {
            var helper_72406 = new_seq_72336(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_72407 = c_72383.toString(16);
                  if (((code_72407 != null ? code_72407.length : 0) == 1)) {
                  if (helper_72406 != null) { helper_72406.push("%0"); } else { helper_72406 = ["%0"]; };
                  }
                  else {
                  if (helper_72406 != null) { helper_72406.push("%"); } else { helper_72406 = ["%"]; };
                  }
                  
                  if (helper_72406 != null) { helper_72406.push(code_72407); } else { helper_72406 = [code_72407]; };
                  i_72380 += 1;
                    if (((s_72304 != null ? s_72304.length : 0) <= i_72380)) Tmp5 = true; else {                      Tmp5 = (s_72304[i_72380] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_72383 = s_72304[i_72380];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_72378[j_72382] = decodeURIComponent(helper_72406.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_72378[j_72382] = helper_72406.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_72382 += 1;
        }
    } while(false);
    if (res_72378 === null) res_72378 = [];
               if (res_72378.length < j_72382) { for (var i=res_72378.length;i<j_72382;++i) res_72378.push(null); }
               else { res_72378.length = j_72382; };
    result_72305 = res_72378.join("");

  return result_72305;

}

function raiseException(e_70618, ename_70619) {
    e_70618.name = ename_70619;
    if ((excHandler == 0)) {
    unhandledException(e_70618);
    }
    
    throw e_70618;

  
}

function cstrToNimstr(c_72287) {
      var ln = c_72287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_72287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_72287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
    var unit_weights_206773 = [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000];

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
var nim_program_result = 0;
var global_raise_hook_64018 = [null];
var local_raise_hook_64023 = [null];
var out_of_mem_hook_64026 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var utc_instance_212431 = [null];
var local_instance_212432 = [null];

function get_js_ticks_220201() {
  var result_220203 = 0.0;

          var isNode = typeof module !== 'undefined' && module.exports

      if (isNode) {
        var process = require('process');
        var time = process.hrtime()
        return time[0] + time[1] / 1000000000;
      } else {
        return window.performance.now() / 1000;
      }
    

  return result_220203;

}

function is_fat_pointer_73801(ti_73803) {
  var result_73804 = false;

  BeforeRet: do {
    result_73804 = !((ConstSet1[ti_73803.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_73804;

}

function nimCopyAux(dest_73832, src_73833, n_73835) {
    switch (n_73835.kind) {
    case 0:
      break;
    case 1:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_73835.sons.length; i++) {
      nimCopyAux(dest_73832, src_73833, n_73835.sons[i]);
    }
    
      break;
    case 3:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
      for (var i = 0; i < n_73835.sons.length; ++i) {
        nimCopyAux(dest_73832, src_73833, n_73835.sons[i][1]);
      }
    
      break;
    }

  
}

function get_mono_time_220414() {
  var result_220416 = {ticks: 0};

    var ticks_220601 = get_js_ticks_220201();
    nimCopy(result_220416, {ticks: (ticks_220601 * 1.0000000000000000e+09)}, NTI220029);

  return result_220416;

}

function add_64038(x_64041, x_64041_Idx, y_64042) {
          if (x_64041[x_64041_Idx] === null) { x_64041[x_64041_Idx] = []; }
      var off = x_64041[x_64041_Idx].length;
      x_64041[x_64041_Idx].length += y_64042.length;
      for (var i = 0; i < y_64042.length; ++i) {
        x_64041[x_64041_Idx][off+i] = y_64042.charCodeAt(i);
      }
    

  
}

function new_seq_72336(len_72339) {
  var result_72341 = null;

    result_72341 = new Array(len_72339); for (var i=0;i<len_72339;++i) {result_72341[i]=null;}
  return result_72341;

}

function unhandledException(e_70542) {
    var buf_70543 = [[]];
    if (!(((e_70542.message != null ? e_70542.message.length : 0) == 0))) {
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_70543[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(e_70542.message); } else { buf_70543[0] = e_70542.message.slice(); };
    }
    else {
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_70543[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit(" [")); } else { buf_70543[0] = makeNimstrLit(" ["); };
    add_64038(buf_70543, 0, e_70542.name);
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("]\x0A")); } else { buf_70543[0] = makeNimstrLit("]\x0A"); };
    var cbuf_70601 = toJSStr(buf_70543[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_70601);
  }
  else {
    throw cbuf_70601;
  }
  

  
}

function integer_out_of_range_error_92418() {
    var eHEX60gensym92422_92603 = null;
    eHEX60gensym92422_92603 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym92422_92603.message = nimCopy(null, makeNimstrLit("Parsed integer outside of valid range"), NTI46040);
    eHEX60gensym92422_92603.parent = null;
    raiseException(eHEX60gensym92422_92603, "ValueError");

  
}

function raw_parse_int_92801(s_92803, b_92805, b_92805_Idx, start_92806) {
      var Tmp1;
          var Tmp4;
      var Tmp7;

  var result_92808 = 0;

    var sign_92809 = -1;
    var i_92810 = start_92806;
    if ((i_92810 < (s_92803 != null ? s_92803.length : 0))) {
    if ((s_92803[i_92810] == 43)) {
    i_92810 += 1;
    }
    else {
    if ((s_92803[i_92810] == 45)) {
    i_92810 += 1;
    sign_92809 = 1;
    }
    }
    }
    
      if (!(i_92810 < (s_92803 != null ? s_92803.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet2[s_92803[i_92810]] != undefined);      }    if (Tmp1) {
    b_92805[b_92805_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_92810 < (s_92803 != null ? s_92803.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet3[s_92803[i_92810]] != undefined);          }        if (!Tmp4) break L3;
          var c_92845 = (s_92803[i_92810] - 48);
          if ((Math.trunc((-9223372036854775808 + c_92845) / 10) <= b_92805[b_92805_Idx])) {
          b_92805[b_92805_Idx] = ((b_92805[b_92805_Idx] * 10) - c_92845);
          }
          else {
          integer_out_of_range_error_92418();
          }
          
          i_92810 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_92810 < (s_92803 != null ? s_92803.length : 0)) && (s_92803[i_92810] == 95))) break L6;
                i_92810 += 1;
              }
          } while(false);
        }
    } while(false);
      if (!(sign_92809 == -1)) Tmp7 = false; else {        Tmp7 = (b_92805[b_92805_Idx] == -9223372036854775808);      }    if (Tmp7) {
    integer_out_of_range_error_92418();
    }
    else {
      b_92805[b_92805_Idx] = (b_92805[b_92805_Idx] * sign_92809);
      result_92808 = (i_92810 - start_92806);
    }
    
    }
    

  return result_92808;

}

function npuParseBiggestInt(s_93003, number_93005, number_93005_Idx, start_93006) {
  var result_93008 = 0;

    var res_93009 = [0];
    result_93008 = raw_parse_int_92801(s_93003, res_93009, 0, start_93006);
    if (!((result_93008 == 0))) {
    number_93005[number_93005_Idx] = res_93009[0];
    }
    

  return result_93008;

}

function npuParseInt(s_93026, number_93028, number_93028_Idx, start_93029) {
      var Tmp1;

  var result_93031 = 0;

    var res_93032 = [0];
    result_93031 = npuParseBiggestInt(s_93026, res_93032, 0, start_93029);
      if ((res_93032[0] < -2147483648)) Tmp1 = true; else {        Tmp1 = (2147483647 < res_93032[0]);      }    if (Tmp1) {
    integer_out_of_range_error_92418();
    }
    
    if (!((result_93031 == 0))) {
    number_93028[number_93028_Idx] = res_93032[0];
    }
    

  return result_93031;

}

function nsuParseInt(s_192234) {
      var Tmp1;

  var result_192235 = [0];

    var l_192237 = npuParseInt(s_192234, result_192235, 0, 0);
      if (!((l_192237 == (s_192234 != null ? s_192234.length : 0)))) Tmp1 = true; else {        Tmp1 = (l_192237 == 0);      }    if (Tmp1) {
    var eHEX60gensym192240_192403 = null;
    eHEX60gensym192240_192403 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym192240_192403.message = nimCopy(null, (makeNimstrLit("invalid integer: ") || []).concat(s_192234 || []), NTI46040);
    eHEX60gensym192240_192403.parent = null;
    raiseException(eHEX60gensym192240_192403, "ValueError");
    }
    

  return result_192235[0];

}

function fib_200014(m_200016) {
    var Tmp1;

  var result_200017 = 0;

    var n_200018 = nsuParseInt(m_200016);
    if ((n_200018 < 0)) {
    var eHEX60gensym200021_200203 = null;
    eHEX60gensym200021_200203 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym200021_200203.message = nimCopy(null, makeNimstrLit("out of range"), NTI46040);
    eHEX60gensym200021_200203.parent = null;
    raiseException(eHEX60gensym200021_200203, "ValueError");
    }
    else {
    if ((n_200018 <= 1)) {
    Tmp1 = 1;
    }
    else {
    Tmp1 = (fib_200014(cstrToNimstr(((n_200018 - 1))+"")) + fib_200014(cstrToNimstr(((n_200018 - 2))+"")));
    }
    }
    result_200017 = Tmp1;

  return result_200017;

}

function HEX2BHEX3D_198585(x_198589, x_198589_Idx, y_198590) {
    x_198589[x_198589_Idx] = (x_198589[x_198589_Idx] + y_198590);

  
}

function to_float_55059(i_55061) {
  var result_55062 = 0.0;

    result_55062 = i_55061;

  return result_55062;

}

function push_221069(s_221072, x_221073) {
    if ((s_221072.n == 0)) {
    s_221072.min = x_221073;
    }
    
    s_221072.n += 1;
    if ((x_221073 < s_221072.min)) {
    s_221072.min = x_221073;
    }
    
    if ((s_221072.max < x_221073)) {
    s_221072.max = x_221073;
    }
    
    HEX2BHEX3D_198585(s_221072, "sum", x_221073);
    var n_221087 = to_float_55059(s_221072.n);
    var delta_221088 = (x_221073 - s_221072.mom1);
    var delta_n_221089 = (delta_221088 / to_float_55059(s_221072.n));
    var delta_n2_221090 = (delta_n_221089 * delta_n_221089);
    var term1_221091 = ((delta_221088 * delta_n_221089) * to_float_55059((s_221072.n - 1)));
    HEX2BHEX3D_198585(s_221072, "mom4", ((((term1_221091 * delta_n2_221090) * (((n_221087 * n_221087) - (3.0000000000000000e+00 * n_221087)) + 3.0000000000000000e+00)) + ((6.0000000000000000e+00 * delta_n2_221090) * s_221072.mom2)) - ((4.0000000000000000e+00 * delta_n_221089) * s_221072.mom3)));
    HEX2BHEX3D_198585(s_221072, "mom3", (((term1_221091 * delta_n_221089) * (n_221087 - 2.0000000000000000e+00)) - ((3.0000000000000000e+00 * delta_n_221089) * s_221072.mom2)));
    HEX2BHEX3D_198585(s_221072, "mom2", term1_221091);
    HEX2BHEX3D_198585(s_221072, "mom1", delta_n_221089);

  
}

function HEX2D_206073(a_206075, b_206076) {
  var result_206077 = 0;

    result_206077 = (a_206075 - b_206076);

  return result_206077;

}

function HEX2A_206001(a_206003, b_206004) {
  var result_206005 = 0;

    result_206005 = (a_206003 * b_206004);

  return result_206005;

}

function convert_206944(unit_from_206947, unit_to_206948, quantity_206949) {
    var Tmp1;

  var result_206950 = 0;

    if ((unit_from_206947 < unit_to_206948)) {
    Tmp1 = Math.trunc(quantity_206949 / Math.trunc(unit_weights_206773[unit_to_206948] / unit_weights_206773[unit_from_206947]));
    }
    else {
    Tmp1 = HEX2A_206001(Math.trunc(unit_weights_206773[unit_from_206947] / unit_weights_206773[unit_to_206948]), quantity_206949);
    }
    
    result_206950 = Tmp1;

  return result_206950;

}

function HEX2B_206037(a_206039, b_206040) {
  var result_206041 = 0;

    result_206041 = (a_206039 + b_206040);

  return result_206041;

}

function convert_207060(unit_from_207063, unit_to_207064, quantity_207065) {
    var Tmp1;

  var result_207066 = 0;

    if ((unit_from_207063 < unit_to_207064)) {
    Tmp1 = Math.trunc(quantity_207065 / Math.trunc(unit_weights_206773[unit_to_207064] / unit_weights_206773[unit_from_207063]));
    }
    else {
    Tmp1 = HEX2A_206001(Math.trunc(unit_weights_206773[unit_from_207063] / unit_weights_206773[unit_to_207064]), quantity_207065);
    }
    
    result_207066 = Tmp1;

  return result_207066;

}

function HEX2D_206091(a_206093, b_206094) {
  var result_206095 = 0;

    result_206095 = (a_206093 - b_206094);

  return result_206095;

}

function convert_209426(unit_from_209429, unit_to_209430, quantity_209431) {
    var Tmp1;

  var result_209432 = 0;

    if ((unit_from_209429 < unit_to_209430)) {
    Tmp1 = Math.trunc(quantity_209431 / Math.trunc(unit_weights_206773[unit_to_209430] / unit_weights_206773[unit_from_209429]));
    }
    else {
    Tmp1 = HEX2A_206001(Math.trunc(unit_weights_206773[unit_from_209429] / unit_weights_206773[unit_to_209430]), quantity_209431);
    }
    
    result_209432 = Tmp1;

  return result_209432;

}

function in_milliseconds_209024(dur_209026) {
    var Tmp1;
    var Tmp2;

  var result_209027 = 0;

    if (!(dur_209026.seconds < 0)) Tmp1 = false; else {      Tmp1 = (0 < dur_209026.nanosecond);    }    var correctionHEX60gensym209030_209201 = Tmp1;
    if (correctionHEX60gensym209030_209201) {
    Tmp2 = HEX2D_206073(convert_206944(3, 2, HEX2B_206037(dur_209026.seconds, 1)), convert_207060(0, 2, HEX2D_206091(convert_207060(3, 0, 1), dur_209026.nanosecond)));
    }
    else {
    Tmp2 = HEX2B_206037(convert_206944(3, 2, dur_209026.seconds), convert_209426(0, 2, dur_209026.nanosecond));
    }
    
    result_209027 = Tmp2;

  return result_209027;

}

function normalize_207047(seconds_207050, nanoseconds_207051) {
  var result_207052 = {seconds: 0, nanosecond: 0};

    result_207052.seconds = HEX2B_206037(seconds_207050, convert_206944(0, 3, nanoseconds_207051));
    var nanosecond_207101 = Math.trunc(nanoseconds_207051 % convert_207060(3, 0, 1));
    if ((nanosecond_207101 < 0)) {
    nanosecond_207101 += convert_207060(3, 0, 1);
    result_207052.seconds -= 1;
    }
    
    result_207052.nanosecond = nanosecond_207101;

  return result_207052;

}

function init_duration_206933(nanoseconds_206935, microseconds_206936, milliseconds_206937, seconds_206938, minutes_206939, hours_206940, days_206941, weeks_206942) {
  var result_206943 = {seconds: 0, nanosecond: 0};

    var seconds_207027 = HEX2B_206037(HEX2B_206037(HEX2B_206037(HEX2B_206037(HEX2B_206037(HEX2B_206037(HEX2B_206037(convert_206944(7, 3, weeks_206942), convert_206944(6, 3, days_206941)), convert_206944(4, 3, minutes_206939)), convert_206944(5, 3, hours_206940)), convert_206944(3, 3, seconds_206938)), convert_206944(2, 3, milliseconds_206937)), convert_206944(1, 3, microseconds_206936)), convert_206944(0, 3, nanoseconds_206935));
    var nanoseconds_207043 = HEX2B_206037(HEX2B_206037(convert_206944(2, 0, Math.trunc(milliseconds_206937 % 1000)), convert_206944(1, 0, Math.trunc(microseconds_206936 % 1000000))), Math.trunc(nanoseconds_206935 % 1000000000));
    nimCopy(result_206943, normalize_207047(seconds_207027, nanoseconds_207043), NTI206618);

  return result_206943;

}

function HEX2D_220217(a_220219, b_220220) {
  var result_220221 = 0;

    result_220221 = (a_220219 - b_220220);

  return result_220221;

}

function HEX2D_220665(a_220667, b_220668) {
  var result_220669 = {seconds: 0, nanosecond: 0};

    nimCopy(result_220669, init_duration_206933(HEX2D_220217(a_220667.ticks, b_220668.ticks), 0, 0, 0, 0, 0, 0, 0), NTI206618);

  return result_220669;

}

function mean_221162(s_221164) {
  var result_221165 = 0.0;

    result_221165 = s_221164.mom1;

  return result_221165;

}

function variance_221179(s_221181) {
  var result_221182 = 0.0;

    result_221182 = (s_221181.mom2 / to_float_55059(s_221181.n));

  return result_221182;

}

function standard_deviation_221213(s_221215) {
  var result_221216 = 0.0;

    result_221216 = Math.sqrt(variance_221179(s_221215));

  return result_221216;

}

function HEX24_221387(a_221389) {
  var result_221390 = null;

    result_221390 = nimCopy(null, makeNimstrLit("RunningStat(\x0A"), NTI46040);
    if (result_221390 != null) { result_221390 = (result_221390).concat((makeNimstrLit("  number of probes: ") || []).concat(cstrToNimstr((a_221389.n)+"") || [],makeNimstrLit("\x0A") || [])); } else { result_221390 = (makeNimstrLit("  number of probes: ") || []).concat(cstrToNimstr((a_221389.n)+"") || [],makeNimstrLit("\x0A") || []).slice(); };
    if (result_221390 != null) { result_221390 = (result_221390).concat((makeNimstrLit("  max: ") || []).concat(cstrToNimstr((a_221389.max)+"") || [],makeNimstrLit("\x0A") || [])); } else { result_221390 = (makeNimstrLit("  max: ") || []).concat(cstrToNimstr((a_221389.max)+"") || [],makeNimstrLit("\x0A") || []).slice(); };
    if (result_221390 != null) { result_221390 = (result_221390).concat((makeNimstrLit("  min: ") || []).concat(cstrToNimstr((a_221389.min)+"") || [],makeNimstrLit("\x0A") || [])); } else { result_221390 = (makeNimstrLit("  min: ") || []).concat(cstrToNimstr((a_221389.min)+"") || [],makeNimstrLit("\x0A") || []).slice(); };
    if (result_221390 != null) { result_221390 = (result_221390).concat((makeNimstrLit("  sum: ") || []).concat(cstrToNimstr((a_221389.sum)+"") || [],makeNimstrLit("\x0A") || [])); } else { result_221390 = (makeNimstrLit("  sum: ") || []).concat(cstrToNimstr((a_221389.sum)+"") || [],makeNimstrLit("\x0A") || []).slice(); };
    if (result_221390 != null) { result_221390 = (result_221390).concat((makeNimstrLit("  mean: ") || []).concat(cstrToNimstr((mean_221162(a_221389))+"") || [],makeNimstrLit("\x0A") || [])); } else { result_221390 = (makeNimstrLit("  mean: ") || []).concat(cstrToNimstr((mean_221162(a_221389))+"") || [],makeNimstrLit("\x0A") || []).slice(); };
    if (result_221390 != null) { result_221390 = (result_221390).concat((makeNimstrLit("  std deviation: ") || []).concat(cstrToNimstr((standard_deviation_221213(a_221389))+"") || [],makeNimstrLit("\x0A") || [])); } else { result_221390 = (makeNimstrLit("  std deviation: ") || []).concat(cstrToNimstr((standard_deviation_221213(a_221389))+"") || [],makeNimstrLit("\x0A") || []).slice(); };
    if (result_221390 != null) { result_221390 = (result_221390).concat(makeNimstrLit(")")); } else { result_221390 = makeNimstrLit(")"); };

  return result_221390;

}
var r_222201 = [{n: 0, min: 0.0, max: 0.0, sum: 0.0, mom1: 0.0, mom2: 0.0, mom3: 0.0, mom4: 0.0}];
L1: do {
  var iterations_222211 = [0];
  var res_222244 = 1;
  L2: do {
      L3: while (true) {
      if (!(res_222244 <= 5)) break L3;
        iterations_222211[0] = res_222244;
        var start_222212 = get_mono_time_220414();
        L4: do {
          var i_222222 = [0];
          var i_222241 = 0;
          L5: do {
              L6: while (true) {
              if (!(i_222241 < 100)) break L6;
                i_222222[0] = i_222241;
                fib_200014(makeNimstrLit("24"));
                i_222241 += 1;
              }
          } while(false);
        } while(false);
        push_221069(r_222201[0], in_milliseconds_209024(HEX2D_220665(get_mono_time_220414(), start_222212)));
        res_222244 += 1;
      }
  } while(false);
} while(false);
rawEcho(HEX24_221387(r_222201[0]));
