/* Generated by the Nim Compiler v1.1.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI223046 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI223041 = {size: 0,kind: 21,base: null,node: null,finalizer: null};
var NTI223036 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI223066 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI49494 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI49404 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI49452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49514 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI46040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI46042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI49508 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI49426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI49430 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46012 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI49436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI49436 = {kind: 1, offset: "errorCode", len: 0, typ: NTI46012, name: "errorCode", sons: null};
NTI49436.node = NNI49436;
var NNI49430 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49430.node = NNI49430;
NTI49508.base = NTI49426;
NTI49514.base = NTI49426;
var NNI49426 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI49508, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI46042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI46040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI46040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI46016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI49514, name: "up", sons: null}]};
NTI49426.node = NNI49426;
var NNI49408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49408.node = NNI49408;
NTI49426.base = NTI49408;
NTI49430.base = NTI49426;
NTI49436.base = NTI49430;
var NNI49452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI49452.node = NNI49452;
NTI49452.base = NTI49430;
NTI49404.base = NTI49494;
NTI223041.base = NTI223036;
NTI223046.base = NTI223036;
var NNI223036 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "item", len: 0, typ: NTI46012, name: "item", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI223041, name: "left", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI223046, name: "right", sons: null}]};
NTI223036.node = NNI223036;
NTI223066.base = NTI223036;

function makeNimstrLit(c_72270) {
      var ln = c_72270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_72270.charCodeAt(i);
  }
  return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_73827, src_73828, ti_73829) {
  var result_74019 = null;

    switch (ti_73829.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(is_fat_pointer_73801(ti_73829))) {
      result_74019 = src_73828;
      }
      else {
        result_74019 = [src_73828[0], src_73828[1]];
      }
      
      break;
    case 19:
            if (dest_73827 === null || dest_73827 === undefined) {
        dest_73827 = {};
      }
      else {
        for (var key in dest_73827) { delete dest_73827[key]; }
      }
      for (var key in src_73828) { dest_73827[key] = src_73828[key]; }
      result_74019 = dest_73827;
    
      break;
    case 18:
    case 17:
      if (!((ti_73829.base == null))) {
      result_74019 = nimCopy(dest_73827, src_73828, ti_73829.base);
      }
      else {
      if ((ti_73829.kind == 17)) {
      result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {m_type: ti_73829} : dest_73827;
      }
      else {
        result_74019 = (dest_73827 === null || dest_73827 === undefined) ? {} : dest_73827;
      }
      }
      nimCopyAux(result_74019, src_73828, ti_73829.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_73828 === null) {
        result_74019 = null;
      }
      else {
        if (dest_73827 === null || dest_73827 === undefined) {
          dest_73827 = new Array(src_73828.length);
        }
        else {
          dest_73827.length = src_73828.length;
        }
        result_74019 = dest_73827;
        for (var i = 0; i < src_73828.length; ++i) {
          result_74019[i] = nimCopy(result_74019[i], src_73828[i], ti_73829.base);
        }
      }
    
      break;
    case 28:
            if (src_73828 !== null) {
        result_74019 = src_73828.slice(0);
      }
    
      break;
    default: 
      result_74019 = src_73828;
      break;
    }

  return result_74019;

}

function toJSStr(s_72304) {
                    var Tmp5;
            var Tmp7;

  var result_72305 = null;

    var res_72378 = new_seq_72336((s_72304 != null ? s_72304.length : 0));
    var i_72380 = 0;
    var j_72382 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_72380 < (s_72304 != null ? s_72304.length : 0))) break L2;
          var c_72383 = s_72304[i_72380];
          if ((c_72383 < 128)) {
          res_72378[j_72382] = String.fromCharCode(c_72383);
          i_72380 += 1;
          }
          else {
            var helper_72406 = new_seq_72336(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_72407 = c_72383.toString(16);
                  if (((code_72407 != null ? code_72407.length : 0) == 1)) {
                  if (helper_72406 != null) { helper_72406.push("%0"); } else { helper_72406 = ["%0"]; };
                  }
                  else {
                  if (helper_72406 != null) { helper_72406.push("%"); } else { helper_72406 = ["%"]; };
                  }
                  
                  if (helper_72406 != null) { helper_72406.push(code_72407); } else { helper_72406 = [code_72407]; };
                  i_72380 += 1;
                    if (((s_72304 != null ? s_72304.length : 0) <= i_72380)) Tmp5 = true; else {                      Tmp5 = (s_72304[i_72380] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_72383 = s_72304[i_72380];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_72378[j_72382] = decodeURIComponent(helper_72406.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_72378[j_72382] = helper_72406.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_72382 += 1;
        }
    } while(false);
    if (res_72378 === null) res_72378 = [];
               if (res_72378.length < j_72382) { for (var i=res_72378.length;i<j_72382;++i) res_72378.push(null); }
               else { res_72378.length = j_72382; };
    result_72305 = res_72378.join("");

  return result_72305;

}

function raiseException(e_70618, ename_70619) {
    e_70618.name = ename_70619;
    if ((excHandler == 0)) {
    unhandledException(e_70618);
    }
    
    throw e_70618;

  
}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr([48, 57]);

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function cstrToNimstr(c_72287) {
      var ln = c_72287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_72287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_72287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var nim_program_result = 0;
var global_raise_hook_64018 = [null];
var local_raise_hook_64023 = [null];
var out_of_mem_hook_64026 = [null];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var env_computed_211410 = [false];
var environment_211412 = [null];

function is_fat_pointer_73801(ti_73803) {
  var result_73804 = false;

  BeforeRet: do {
    result_73804 = !((ConstSet1[ti_73803.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_73804;

}

function nimCopyAux(dest_73832, src_73833, n_73835) {
    switch (n_73835.kind) {
    case 0:
      break;
    case 1:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_73835.sons.length; i++) {
      nimCopyAux(dest_73832, src_73833, n_73835.sons[i]);
    }
    
      break;
    case 3:
            dest_73832[n_73835.offset] = nimCopy(dest_73832[n_73835.offset], src_73833[n_73835.offset], n_73835.typ);
      for (var i = 0; i < n_73835.sons.length; ++i) {
        nimCopyAux(dest_73832, src_73833, n_73835.sons[i][1]);
      }
    
      break;
    }

  
}

function add_64038(x_64041, x_64041_Idx, y_64042) {
          if (x_64041[x_64041_Idx] === null) { x_64041[x_64041_Idx] = []; }
      var off = x_64041[x_64041_Idx].length;
      x_64041[x_64041_Idx].length += y_64042.length;
      for (var i = 0; i < y_64042.length; ++i) {
        x_64041[x_64041_Idx][off+i] = y_64042.charCodeAt(i);
      }
    

  
}

function new_seq_72336(len_72339) {
  var result_72341 = null;

    result_72341 = new Array(len_72339); for (var i=0;i<len_72339;++i) {result_72341[i]=null;}
  return result_72341;

}

function unhandledException(e_70542) {
    var buf_70543 = [[]];
    if (!(((e_70542.message != null ? e_70542.message.length : 0) == 0))) {
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_70543[0] = makeNimstrLit("Error: unhandled exception: "); };
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(e_70542.message); } else { buf_70543[0] = e_70542.message.slice(); };
    }
    else {
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_70543[0] = makeNimstrLit("Error: unhandled exception"); };
    }
    
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit(" [")); } else { buf_70543[0] = makeNimstrLit(" ["); };
    add_64038(buf_70543, 0, e_70542.name);
    if (buf_70543[0] != null) { buf_70543[0] = (buf_70543[0]).concat(makeNimstrLit("]\x0A")); } else { buf_70543[0] = makeNimstrLit("]\x0A"); };
    var cbuf_70601 = toJSStr(buf_70543[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_70601);
  }
  else {
    throw cbuf_70601;
  }
  

  
}

function param_count_220023() {
  var result_220025 = 0;

    var eHEX60gensym220028_220203 = null;
    eHEX60gensym220028_220203 = {m_type: NTI49436, errorCode: 0, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym220028_220203.message = nimCopy(null, makeNimstrLit("paramCount is not implemented on Nintendo Switch"), NTI46040);
    eHEX60gensym220028_220203.parent = null;
    raiseException(eHEX60gensym220028_220203, "OSError");

  return result_220025;

}

function integer_out_of_range_error_93218() {
    var eHEX60gensym93222_93403 = null;
    eHEX60gensym93222_93403 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym93222_93403.message = nimCopy(null, makeNimstrLit("Parsed integer outside of valid range"), NTI46040);
    eHEX60gensym93222_93403.parent = null;
    raiseException(eHEX60gensym93222_93403, "ValueError");

  
}

function raw_parse_int_93601(s_93603, b_93605, b_93605_Idx, start_93606) {
      var Tmp1;
          var Tmp4;
      var Tmp7;

  var result_93608 = 0;

    var sign_93609 = -1;
    var i_93610 = start_93606;
    if ((i_93610 < (s_93603 != null ? s_93603.length : 0))) {
    if ((s_93603[i_93610] == 43)) {
    i_93610 += 1;
    }
    else {
    if ((s_93603[i_93610] == 45)) {
    i_93610 += 1;
    sign_93609 = 1;
    }
    }
    }
    
      if (!(i_93610 < (s_93603 != null ? s_93603.length : 0))) Tmp1 = false; else {        Tmp1 = (ConstSet2[s_93603[i_93610]] != undefined);      }    if (Tmp1) {
    b_93605[b_93605_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_93610 < (s_93603 != null ? s_93603.length : 0))) Tmp4 = false; else {            Tmp4 = (ConstSet3[s_93603[i_93610]] != undefined);          }        if (!Tmp4) break L3;
          var c_93645 = (s_93603[i_93610] - 48);
          if ((Math.trunc((-9223372036854775808 + c_93645) / 10) <= b_93605[b_93605_Idx])) {
          b_93605[b_93605_Idx] = ((b_93605[b_93605_Idx] * 10) - c_93645);
          }
          else {
          integer_out_of_range_error_93218();
          }
          
          i_93610 += 1;
          L5: do {
              L6: while (true) {
              if (!((i_93610 < (s_93603 != null ? s_93603.length : 0)) && (s_93603[i_93610] == 95))) break L6;
                i_93610 += 1;
              }
          } while(false);
        }
    } while(false);
      if (!(sign_93609 == -1)) Tmp7 = false; else {        Tmp7 = (b_93605[b_93605_Idx] == -9223372036854775808);      }    if (Tmp7) {
    integer_out_of_range_error_93218();
    }
    else {
      b_93605[b_93605_Idx] = (b_93605[b_93605_Idx] * sign_93609);
      result_93608 = (i_93610 - start_93606);
    }
    
    }
    

  return result_93608;

}

function npuParseBiggestInt(s_93803, number_93805, number_93805_Idx, start_93806) {
  var result_93808 = 0;

    var res_93809 = [0];
    result_93808 = raw_parse_int_93601(s_93803, res_93809, 0, start_93806);
    if (!((result_93808 == 0))) {
    number_93805[number_93805_Idx] = res_93809[0];
    }
    

  return result_93808;

}

function npuParseInt(s_93826, number_93828, number_93828_Idx, start_93829) {
      var Tmp1;

  var result_93831 = 0;

    var res_93832 = [0];
    result_93831 = npuParseBiggestInt(s_93826, res_93832, 0, start_93829);
      if ((res_93832[0] < -2147483648)) Tmp1 = true; else {        Tmp1 = (2147483647 < res_93832[0]);      }    if (Tmp1) {
    integer_out_of_range_error_93218();
    }
    
    if (!((result_93831 == 0))) {
    number_93828[number_93828_Idx] = res_93832[0];
    }
    

  return result_93831;

}

function nsuParseInt(s_193234) {
      var Tmp1;

  var result_193235 = [0];

    var l_193237 = npuParseInt(s_193234, result_193235, 0, 0);
      if (!((l_193237 == (s_193234 != null ? s_193234.length : 0)))) Tmp1 = true; else {        Tmp1 = (l_193237 == 0);      }    if (Tmp1) {
    var eHEX60gensym193240_193403 = null;
    eHEX60gensym193240_193403 = {m_type: NTI49452, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym193240_193403.message = nimCopy(null, (makeNimstrLit("invalid integer: ") || []).concat(s_193234 || []), NTI46040);
    eHEX60gensym193240_193403.parent = null;
    raiseException(eHEX60gensym193240_193403, "ValueError");
    }
    

  return result_193235[0];

}

function param_str_219821(i_219823) {
  var result_219824 = null;

    var eHEX60gensym219827_220003 = null;
    eHEX60gensym219827_220003 = {m_type: NTI49436, errorCode: 0, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
    eHEX60gensym219827_220003.message = nimCopy(null, makeNimstrLit("paramStr is not implemented on Nintendo Switch"), NTI46040);
    eHEX60gensym219827_220003.parent = null;
    raiseException(eHEX60gensym219827_220003, "OSError");

  return result_219824;

}

function new_seq_223062(len_223065) {
  var result_223067 = null;

    result_223067 = new Array(len_223065); for (var i=0;i<len_223065;++i) {result_223067[i]={item: 0, left: null, right: null};}
  return result_223067;

}

function HEX2AHEX3D_223135(x_223139, x_223139_Idx, y_223140) {
    x_223139[x_223139_Idx] = (x_223139[x_223139_Idx] * y_223140);

  
}

function HEX5E_223126(x_223129, y_223130) {
  var result_223131 = [0];

    switch (y_223130) {
    case 0:
      result_223131[0] = 1;
      break;
    case 1:
      result_223131[0] = x_223129;
      break;
    case 2:
      result_223131[0] = (x_223129 * x_223129);
      break;
    case 3:
      result_223131[0] = ((x_223129 * x_223129) * x_223129);
      break;
    default: 
      var colontmp__223416 = {Field0: x_223129, Field1: nimCopy(null, y_223130, NTI49404)};
      var x_223133 = [0];
      var y_223134 = 0;
      x_223133[0] = colontmp__223416["Field0"];
      y_223134 = colontmp__223416["Field1"];
      result_223131[0] = 1;
      L1: do {
          L2: while (true) {
          if (!true) break L2;
            if (!(((y_223134 & 1) == 0))) {
            HEX2AHEX3D_223135(result_223131, 0, x_223133[0]);
            }
            
            y_223134 = (y_223134 >> 1);
            if ((y_223134 == 0)) {
            break L1;
            }
            
            HEX2AHEX3D_223135(x_223133, 0, x_223133[0]);
          }
      } while(false);
      break;
    }

  return result_223131[0];

}

function init_object_pool_223050(depth_223052) {
  var result_223053 = {objs: null, size: 0};

    result_223053.objs = nimCopy(null, new_seq_223062(HEX5E_223126(2, (depth_223052 * 4))), NTI223066);

  return result_223053;

}

function item_check_223243(noderef_223250) {
  var result_223251 = 0;

    if ((noderef_223250.left == null)) {
    result_223251 = noderef_223250.item;
    }
    else {
      result_223251 = ((noderef_223250.item + item_check_223243(noderef_223250.left)) - item_check_223243(noderef_223250.right));
    }
    

  return result_223251;

}

function bottom_up_tree_223196(item_223198, depth_223199, pool_223201) {
  var result_223207 = null;

    result_223207 = pool_223201.objs[pool_223201.size];
    pool_223201.size += 1;
    result_223207.item = item_223198;
    if ((0 < depth_223199)) {
    result_223207.left = bottom_up_tree_223196(((2 * item_223198) - 1), (depth_223199 - 1), pool_223201);
    result_223207.right = bottom_up_tree_223196((2 * item_223198), (depth_223199 - 1), pool_223201);
    }
    

  return result_223207;

}
var Tmp1;
var n_223274 = [0];
if ((0 < param_count_220023())) {
n_223274[0] = nsuParseInt(param_str_219821(1));
}

if ((n_223274[0] < 6)) {
Tmp1 = 6;
}
else {
Tmp1 = ((n_223274[0])|0);
}

var max_depth_223275 = Tmp1;
var stretch_depth_223276 = (max_depth_223275 + 1);
var pool_223277 = [init_object_pool_223050(((stretch_depth_223276)|0))];
var check_223279 = [item_check_223243(bottom_up_tree_223196(0, stretch_depth_223276, pool_223277[0]))];
rawEcho(makeNimstrLit("stretch tree of depth "), cstrToNimstr((((stretch_depth_223276)|0))+""), makeNimstrLit("\x09 check: "), cstrToNimstr((((check_223279[0])|0))+""));
var long_lived_tree_223285 = bottom_up_tree_223196(0, max_depth_223275, pool_223277[0]);
L2: do {
  var depth_223293 = [0];
  var colontmp__223395 = 0;
  colontmp__223395 = ((max_depth_223275)|0);
  var res_223400 = 4;
  L3: do {
      L4: while (true) {
      if (!(res_223400 <= colontmp__223395)) break L4;
        depth_223293[0] = res_223400;
        var iterations_223299 = (1 << ((((max_depth_223275)|0) - depth_223293[0]) + 4));
        check_223279[0] = 0;
        var pool_223300 = [init_object_pool_223050(depth_223293[0])];
        L5: do {
          var i_223304 = [0];
          var res_223393 = 1;
          L6: do {
              L7: while (true) {
              if (!(res_223393 <= iterations_223299)) break L7;
                i_223304[0] = res_223393;
                check_223279[0] += item_check_223243(bottom_up_tree_223196(i_223304[0], depth_223293[0], pool_223300[0]));
                check_223279[0] += item_check_223243(bottom_up_tree_223196(-(i_223304[0]), depth_223293[0], pool_223300[0]));
                res_223393 += 1;
              }
          } while(false);
        } while(false);
        rawEcho(cstrToNimstr(((((iterations_223299 * 2))|0))+""), makeNimstrLit("\x09 trees of depth "), cstrToNimstr((depth_223293[0])+""), makeNimstrLit("\x09 check: "), cstrToNimstr((((check_223279[0])|0))+""));
        res_223400 += 2;
      }
  } while(false);
} while(false);
rawEcho(makeNimstrLit("long lived tree of depth "), cstrToNimstr((((max_depth_223275)|0))+""), makeNimstrLit("\x09 check: "), cstrToNimstr((((item_check_223243(long_lived_tree_223285))|0))+""));
